openapi: 3.1.0
info:
  description: API for interacting with the Hydrus Client
  title: Hydrus Client API
  version: 1.0.0
servers:
- description: Local Hydrus Client instance
  url: http://localhost:45869
paths:
  /api_version:
    get:
      description: Retrieves the current API version and Hydrus client version. Note
        that this endpoint does not require authentication.
      operationId: api_version
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api_version_200_response"
          description: A JSON object containing the current API version and Hydrus
            client version.
      security: []
      summary: Gets the current API version.
      tags:
      - access_management
  /request_new_permissions:
    get:
      description: "This endpoint allows registering a new external program with the\
        \ Hydrus client. Requires the 'add from api request' dialog to be open in\
        \ the client UI, otherwise returns 403."
      operationId: request_new_permissions
      parameters:
      - explode: true
        in: query
        name: name
        required: true
        schema:
          description: Descriptive name of your access
          type: string
        style: form
      - explode: true
        in: query
        name: permits_everything
        required: false
        schema:
          description: Whether to permit all tasks now and in the future
          type: boolean
        style: form
      - description: JSON-encoded list of requested permissions
        example: "[0,1]"
        explode: true
        in: query
        name: basic_permissions
        required: false
        schema:
          items:
            description: A list of numerical permission identifiers to request
            enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
            - 11
            - 12
            - 13
            type: integer
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request_new_permissions_200_response"
          description: Access key successfully generated
        "403":
          description: "Request denied, likely because the 'add from api request'\
            \ dialog is not open"
        "400":
          description: Invalid or missing parameters
      security: []
      summary: Register a new external program with the client
      tags:
      - access_management
  /session_key:
    get:
      description: "Retrieves a new session key for authenticated requests. Session\
        \ keys expire after 24 hours of inactivity, client restart, or if the underlying\
        \ access key is deleted."
      operationId: session_key
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/session_key_200_response"
          description: A JSON object containing the new session key
        "401":
          description: Missing or invalid access key
        "419":
          description: Session key expired
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get a new session key
      tags:
      - access_management
  /verify_access_key:
    get:
      operationId: verify_access_key
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verify_access_key_200_response"
          description: JSON object containing permission details if the key is valid.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired or invalid.
      security:
      - Hydrus-Client-API-Access-Key: []
        Hydrus-Client-API-Session-Key: []
      summary: Verify the provided access/session key and return basic permission
        info.
      tags:
      - access_management
  /get_service:
    get:
      description: Access to this endpoint requires either an access key or a session
        key. At least one of `service_name` or `service_key` must be provided.
      operationId: get_service
      parameters:
      - explode: true
        in: query
        name: service_name
        required: false
        schema:
          description: The human-readable name of the service.
          type: string
        style: form
      - explode: true
        in: query
        name: service_key
        required: false
        schema:
          description: The unique hex identifier of the service.
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_service_200_response"
          description: Service information
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_service_404_response"
          description: Service not found
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_service_400_response"
          description: Invalid or missing parameters
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Retrieve information about a specific service
      tags:
      - access_management
  /get_services:
    get:
      description: "Returns a list of all services with their keys, names, and types.\
        \ Used to identify file/tag domains for other API requests."
      operationId: get_services
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicesObject"
          description: A JSON object containing the services.
        "401":
          description: Access key or session key missing or invalid.
        "403":
          description: Insufficient permissions to access this endpoint.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Retrieve all services available in the client.
      tags:
      - access_management
  /add_files/add_file:
    post:
      description: Tells the client to import a file either by path or raw bytes.
        Requires the "Import Files" permission.
      operationId: add_files_add_file
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/add_files_add_file_request"
          application/octet-stream:
            schema:
              description: Raw file bytes to import. No other parameters are supported
                in this mode.
              format: binary
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_files_add_file_200_response"
          description: The file was processed successfully.
        "400":
          description: "Bad request, e.g., invalid parameters or incorrect file domain."
        "401":
          description: Missing access key or session key.
        "403":
          description: Insufficient permissions to perform the operation.
        "500":
          description: Server error occurred.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Import a file into the client
      tags:
      - add_files
  /add_files/delete_files:
    post:
      description: Sends specified files to the trash or performs physical deletion
        based on the file domain.
      operationId: add_files_delete_files
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/add_files_delete_files_request"
        required: true
      responses:
        "200":
          content: {}
          description: Files successfully deleted.
        "400":
          description: Invalid or missing parameters.
        "401":
          description: Missing access key or session cookie.
        "403":
          description: Insufficient permissions to delete files.
        "419":
          description: Session cookie expired.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Delete files from the client.
      tags:
      - add_files
  /add_files/undelete_files:
    post:
      description: |
        Tell the client to restore files that were previously deleted to their old file service(s).
        This operation will only occur on files that are currently in your file store.
      operationId: add_files_undelete_files
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/add_files_undelete_files_request"
        required: true
      responses:
        "200":
          description: Success. No content returned.
        "400":
          description: Bad request. Invalid or missing parameters.
        "401":
          description: Unauthorized. Missing or invalid access key.
        "403":
          description: Forbidden. Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Undelete files that were previously deleted.
      tags:
      - add_files
  /add_files/clear_file_deletion_record:
    post:
      description: Tell the client to forget that it once deleted files.
      operationId: add_files_clear_file_deletion_record
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClearFileDeletionRecordRequest"
        required: true
      responses:
        "200":
          description: Success. No content returned.
        "400":
          description: Invalid or missing parameters.
        "401":
          description: Missing access key or session key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Clear file deletion record
      tags:
      - add_files
  /add_files/migrate_files:
    post:
      description: This endpoint migrates files (by hash or ID) from one local file
        domain to another or multiple domains. Restricted to users with the Import
        Files permission.
      operationId: add_files_migrate_files
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MigrateFilesRequest"
        required: true
      responses:
        "200":
          content: {}
          description: Files successfully migrated.
        "400":
          description: "Invalid request (e.g., non-local files or invalid file domain)."
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Expired or invalid session key.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Copy files from one local file domain to another.
      tags:
      - add_files
  /add_files/archive_files:
    post:
      description: Tell the client to archive inboxed files.
      operationId: add_files_archive_files
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArchiveFilesRequest"
        required: true
      responses:
        "200":
          description: Success. No content returned.
        "400":
          description: Missing or invalid parameters.
        "401":
          description: Access key or session key missing.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Archive inboxed files
      tags:
      - add_files
  /add_files/unarchive_files:
    post:
      description: "This endpoint tells the client to re-inbox archived files, removing\
        \ them from the archive. It only affects files in 'my files' or 'trash'. No\
        \ error is returned if files do not exist or are already in the inbox."
      operationId: add_files_unarchive_files
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnarchiveFilesRequest"
        required: true
      responses:
        "200":
          description: Success. No content returned.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Unarchive files by putting them back into the inbox.
      tags:
      - add_files
  /add_files/generate_hashes:
    post:
      description: |
        Generate hashes for an arbitrary file. You can either send the file's path or the file's raw bytes.

        Restricted access: YES (Import Files permission needed)

        Required Headers:
        - Content-Type: `application/json` (if sending path)
        - Content-Type: `application/octet-stream` (if sending file bytes)
      operationId: add_files_generate_hashes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/add_files_generate_hashes_request"
          application/octet-stream:
            schema:
              description: Raw file bytes
              format: binary
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_files_generate_hashes_200_response"
          description: JSON object containing file hashes
        "400":
          description: Missing or invalid parameter
        "401":
          description: Missing access key or session cookie
        "403":
          description: Insufficient permissions
        "500":
          description: Server error
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Generate hashes for an arbitrary file
      tags:
      - add_files
  /add_urls/get_url_files:
    get:
      description: Returns information about files associated with the given URL.
        Requires the 'Import URLs' permission.
      operationId: add_urls_get_url_files
      parameters:
      - explode: true
        in: query
        name: url
        required: true
        schema:
          format: uri
          type: string
        style: form
      - explode: true
        in: query
        name: doublecheck_file_system
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_urls_get_url_files_200_response"
          description: A JSON object containing the files associated with the URL.
        "401":
          description: Missing access key or insufficient permissions.
        "403":
          description: Insufficient permissions to perform the requested action.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Ask the client about a URL's files.
      tags:
      - add_urls
  /add_urls/get_url_info:
    get:
      description: "Returns metadata such as the normalized URL, URL type, and whether\
        \ the client can parse it."
      operationId: add_urls_get_url_info
      parameters:
      - explode: true
        in: query
        name: url
        required: true
        schema:
          format: uri
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlInfo"
          description: Information about the URL.
        "400":
          description: Missing or invalid parameters.
        "401":
          description: Access key or session key missing.
        "403":
          description: Insufficient permissions.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get information about a URL.
      tags:
      - add_urls
  /add_urls/add_url:
    post:
      operationId: add_urls_add_url
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/add_urls_add_url_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_urls_add_url_200_response"
          description: The URL was successfully added.
        "400":
          description: Invalid request parameters.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions to perform the operation.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Add a URL for import
      tags:
      - add_urls
  /add_urls/associate_url:
    post:
      operationId: add_urls_associate_url
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/add_urls_associate_url_request"
        required: true
      responses:
        "200":
          description: Success. No content returned.
        "400":
          description: Bad request. Invalid or missing parameters.
        "401":
          description: Missing access key or session key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Associate or disassociate URLs with files
      tags:
      - add_urls
  /add_tags/clean_tags:
    get:
      description: |
        Asks the client to clean and normalize a list of tags according to its internal rules.
        This can be useful for ensuring tags are in a consistent format before applying them to files.
      operationId: add_tags_clean_tags
      parameters:
      - description: A list of tags to be cleaned.
        explode: true
        in: query
        name: tags
        required: true
        schema:
          example:
          - ' bikini '
          - blue    eyes
          - " character : samus aran "
          - ' :)'
          - '   '
          - ""
          - "10"
          - "11"
          - "9"
          - system:wew
          - -flower
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_tags_clean_tags_200_response"
          description: Cleaned tags in Hydrus-normalized form and sorted order.
        "400":
          description: Invalid or missing parameters.
        "401":
          description: Missing access key or session cookie.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session cookie expired.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Clean tags according to Hydrus rules
      tags:
      - add_tags
  /add_tags/get_favourite_tags:
    get:
      description: Fetches a list of favourite tags as displayed in the client UI
        under the 'favourites' tab.
      operationId: add_tags_get_favourite_tags
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_tags_get_favourite_tags_200_response"
          description: A list of favourite tags.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Fetch the client's favourite tags.
      tags:
      - add_tags
  /add_tags/get_siblings_and_parents:
    get:
      description: "Ask the client about tags' sibling and parent relationships.\n\
        \n!!! warning \"Tag Relationships Apply In A Complicated Way\"\n    There\
        \ are two caveats to this data:  \n    \n    1. The siblings and parents here\
        \ are not just what is in _tags->manage tag siblings/parents_, they are the\
        \ final computed combination of rules as set in _tags->manage where tag siblings\
        \ and parents apply_. The data given here is not guaranteed to be useful for\
        \ editing siblings and parents on a particular service. That data, which is\
        \ currently pair-based, will appear in a different API request in future.\n\
        \    2. This is what is _actually processed, right now,_ for those user preferences,\
        \ as per _tags->sibling/parent sync->review current sync_. It reflects what\
        \ they currently see in the UI. If the user still has pending sync work, this\
        \ computation will change in future, perhaps radically (e.g. if they just\
        \ removed the whole PTR ruleset two minutes ago), as will the rest of the\
        \ \"display\" domain. The results may be funky while a user is in the midst\
        \ of syncing, but these values are fine for most purposes. In the short term,\
        \ you can broadly assume that the rules here very closely align with what\
        \ you see in a recent file metadata call that pulls storage vs display mappings.\
        \ If you want to decorate an autocomplete results call with sibling or parent\
        \ data, this data is good for that.\n"
      operationId: add_tags_get_siblings_and_parents
      parameters:
      - description: A list of the tags you want info on
        explode: true
        in: query
        name: tags
        required: true
        schema:
          example:
          - blue eyes
          - samus aran
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSiblingsAndParentsResponse"
          description: A Services Object and a tags object mapping each requested
            tag to its relationships on each service.
        "400":
          description: Missing or invalid parameters
        "401":
          description: Missing access key or session cookie
        "403":
          description: Insufficient permissions
        "419":
          description: Session cookie expired
        "500":
          description: Internal server error
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get sibling and parent relationships for tags
      tags:
      - add_tags
  /add_tags/search_tags:
    get:
      description: Search the client for tags based on the provided query and optional
        file/tag domain filters.
      operationId: add_tags_search_tags
      parameters:
      - description: "The tag text to search for, enter exactly what you would in\
          \ the client UI."
        explode: true
        in: query
        name: search
        required: true
        schema:
          type: string
        style: form
      - description: The file service key to limit the search to specific files.
        explode: true
        in: query
        name: file_service_key
        required: false
        schema:
          format: hex
          type: string
        style: form
      - description: A list of file service keys to limit the search to specific files.
        explode: true
        in: query
        name: file_service_keys
        required: false
        schema:
          items:
            format: hex
            type: string
          type: array
        style: form
      - description: The file service key to search for files deleted from this domain.
        explode: true
        in: query
        name: deleted_file_service_key
        required: false
        schema:
          format: hex
          type: string
        style: form
      - description: A list of file service keys to search for files deleted from
          specific domains.
        explode: true
        in: query
        name: deleted_file_service_keys
        required: false
        schema:
          items:
            format: hex
            type: string
          type: array
        style: form
      - description: The tag service key to limit the search to specific tags.
        explode: true
        in: query
        name: tag_service_key
        required: false
        schema:
          format: hex
          type: string
        style: form
      - description: Whether to search raw (`storage`) or sibling-processed (`display`)
          tags.
        explode: true
        in: query
        name: tag_display_type
        required: false
        schema:
          enum:
          - storage
          - display
          type: string
        style: form
      - description: Permanent access key for authentication.
        explode: true
        in: query
        name: Hydrus-Client-API-Access-Key
        required: false
        schema:
          type: string
        style: form
      - description: Temporary session key for authentication.
        explode: true
        in: query
        name: Hydrus-Client-API-Session-Key
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_tags_search_tags_200_response"
          description: A list of matching tags and their counts.
        "400":
          description: Missing or invalid parameter.
        "401":
          description: Access key or session key missing.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Search the client for tags.
      tags:
      - add_tags
  /add_tags/add_tags:
    post:
      description: "Adds, deletes, pends, or petitions tags for specified files. Requires\
        \ Add Tags permission."
      operationId: add_tags_add_tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/add_tags_add_tags_request"
        required: true
      responses:
        "200":
          content: {}
          description: Tags successfully updated.
        "400":
          description: Invalid request parameters.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Add or modify tags for files
      tags:
      - add_tags
  /add_tags/set_favourite_tags:
    post:
      description: Edits the client's list of favourite tags either by setting a new
        list entirely or modifying the existing list with additions or removals.
      operationId: add_tags_set_favourite_tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/add_tags_set_favourite_tags_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_tags_set_favourite_tags_200_response"
          description: The favourite tags have been successfully updated. Returns
            the new list of favourite tags.
        "400":
          description: Bad request. Missing or invalid parameters.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Set or modify the client's favourite tags
      tags:
      - add_tags
  /edit_ratings/set_rating:
    post:
      operationId: edit_ratings_set_rating
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/edit_ratings_set_rating_request"
        required: true
      responses:
        "200":
          description: Successful response with no content.
      security:
      - Hydrus-Client-API-Access-Key: []
        Hydrus-Client-API-Session-Key: []
      summary: Add or remove ratings associated with a file.
      tags:
      - edit_ratings
  /edit_times/increment_file_viewtime:
    post:
      description: Adds a file view to the file viewing statistics system.
      operationId: edit_times_increment_file_viewtime
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncrementFileViewtimeRequest"
        required: true
      responses:
        "200":
          description: Success. No content returned.
        "400":
          description: Bad request. Missing or invalid parameters.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions or file viewing statistics tracking
            is disabled.
        "419":
          description: Session key expired.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Increment file viewtime statistics
      tags:
      - edit_times
  /edit_times/set_file_viewtime:
    post:
      description: "This endpoint allows setting fixed values in the file viewing\
        \ statistics system. Recommended for maintenance, migration, or reset scenarios."
      operationId: edit_times_set_file_viewtime
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/edit_times_set_file_viewtime_request"
        required: true
      responses:
        "200":
          content: {}
          description: Success response with no content.
        "400":
          description: Invalid or missing parameters.
        "401":
          description: Missing access key or session cookie.
        "403":
          description: Insufficient permissions or file viewing statistics tracking
            is disabled.
        "419":
          description: Session expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Set fixed values in the file viewing statistics system
      tags:
      - edit_times
  /edit_times/set_time:
    post:
      operationId: edit_times_set_time
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/edit_times_set_time_request"
        required: true
      responses:
        "200":
          description: No content.
      security:
      - Hydrus-Client-API-Access-Key: []
        Hydrus-Client-API-Session-Key: []
      summary: Add or remove timestamps associated with a file.
      tags:
      - edit_times
  /add_notes/set_notes:
    post:
      operationId: add_notes_set_notes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/add_notes_set_notes_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_notes_set_notes_200_response"
          description: Notes successfully added or updated
        "400":
          description: Invalid or missing parameters
        "401":
          description: Missing access key
        "403":
          description: Insufficient permissions
        "500":
          description: Server error
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Add or update notes associated with a file
      tags:
      - add_notes
  /add_notes/delete_notes:
    post:
      description: Deletes one or more named notes from a specified file by hash or
        file ID.
      operationId: add_notes_delete_notes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/add_notes_delete_notes_request"
        required: true
      responses:
        "200":
          content: {}
          description: Notes successfully deleted. This operation is idempotent.
        "400":
          description: Missing or invalid parameters.
        "401":
          description: Missing access key or session key.
        "403":
          description: Insufficient permissions to delete notes.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Remove notes associated with a file
      tags:
      - add_notes
  /get_files/search_files:
    get:
      description: "Search for files using tags and system predicates. Supports complex\
        \ search logic including wildcards, negation, and system predicates like file\
        \ size, resolution, and time filters."
      operationId: get_files_search_files
      parameters:
      - explode: true
        in: query
        name: tags
        required: true
        schema:
          description: A list of tags to search for. Can include system predicates
            and negated tags.
          items:
            type: string
          type: array
        style: form
      - example: 6c6f63616c2066696c6573
        explode: true
        in: query
        name: file_service_key
        required: false
        schema:
          description: The file service key to search within. Defaults to 'all my
            files' if not provided.
          format: hex
          type: string
        style: form
      - example:
        - 6c6f63616c2066696c6573
        - ae7d9a603008919612894fc360130ae3d9925b8577d075cd0473090ac38b12b6
        explode: true
        in: query
        name: file_service_keys
        required: false
        schema:
          description: A list of file service keys to search within (union). Overrides
            `file_service_key` if provided.
          items:
            format: hex
            type: string
          type: array
        style: form
      - example: 7472617368
        explode: true
        in: query
        name: deleted_file_service_key
        required: false
        schema:
          description: The file service key to search for files deleted from this
            domain.
          format: hex
          type: string
        style: form
      - example:
        - 7472617368
        - 616c6c206c6f63616c2066696c6573
        explode: true
        in: query
        name: deleted_file_service_keys
        required: false
        schema:
          description: A list of file service keys to search for files deleted from
            these domains (union).
          items:
            format: hex
            type: string
          type: array
        style: form
      - example: c6f63616c2074616773
        explode: true
        in: query
        name: tag_service_key
        required: false
        schema:
          description: The tag service key to search within. Defaults to 'all my tags'
            if not provided.
          format: hex
          type: string
        style: form
      - explode: true
        in: query
        name: include_current_tags
        required: false
        schema:
          default: true
          description: Whether to include current tags in the search.
          type: boolean
        style: form
      - explode: true
        in: query
        name: include_pending_tags
        required: false
        schema:
          default: true
          description: Whether to include pending tags in the search.
          type: boolean
        style: form
      - explode: true
        in: query
        name: file_sort_type
        required: false
        schema:
          default: 2
          description: The type of sorting to apply to the results.
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 18
          - 19
          - 20
          - 21
          - 22
          - 23
          - 24
          - 25
          - 26
          - 27
          type: integer
        style: form
      - explode: true
        in: query
        name: file_sort_asc
        required: false
        schema:
          default: false
          description: Whether to sort the results in ascending order.
          type: boolean
        style: form
      - explode: true
        in: query
        name: return_file_ids
        required: false
        schema:
          default: true
          description: Whether to include file IDs in the response.
          type: boolean
        style: form
      - explode: true
        in: query
        name: return_hashes
        required: false
        schema:
          default: false
          description: Whether to include file hashes in the response.
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_files_search_files_200_response"
          description: A list of file IDs and/or hashes matching the search criteria.
        "400":
          description: "Bad request, invalid parameters."
        "401":
          description: Missing access key.
        "403":
          description: Access denied or insufficient permissions.
        "419":
          description: Expired or invalid session key.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Search for the client's files.
      tags:
      - get_files
  /get_files/file_hashes:
    get:
      description: "Converts hashes between types (e.g., MD5 to SHA256)"
      operationId: get_files_file_hashes
      parameters:
      - explode: true
        in: query
        name: hash
        required: false
        schema:
          description: A single hexadecimal hash
          type: string
        style: form
      - explode: true
        in: query
        name: hashes
        required: false
        schema:
          description: A list of hexadecimal hashes
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: source_hash_type
        required: false
        schema:
          default: sha256
          description: The hash type of the input hashes
          enum:
          - sha256
          - md5
          - sha1
          - sha512
          type: string
        style: form
      - explode: true
        in: query
        name: desired_hash_type
        required: true
        schema:
          description: The desired hash type to convert to
          enum:
          - sha256
          - md5
          - sha1
          - sha512
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_files_file_hashes_200_response"
          description: A mapping of source hashes to desired hash type
        "400":
          description: Bad request (invalid or missing parameters)
        "401":
          description: Missing access key or session key
        "403":
          description: Insufficient permissions
        "419":
          description: Session key expired
        "500":
          description: Internal server error
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Lookup file hashes from other hashes
      tags:
      - get_files
  /get_files/file_metadata:
    get:
      operationId: get_files_file_metadata
      parameters:
      - explode: true
        in: query
        name: file_id
        required: false
        schema:
          type: integer
          nullable: true
        style: form
      - explode: true
        in: query
        name: file_ids
        required: false
        schema:
          items:
            type: integer
          type: array
        style: form
      - explode: true
        in: query
        name: hash
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: hashes
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: create_new_file_ids
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: only_return_identifiers
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: only_return_basic_information
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: detailed_url_information
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: include_blurhash
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: include_milliseconds
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: include_notes
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: include_services_object
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: hide_service_keys_tags
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_files_file_metadata_200_response"
          description: A list of JSON Objects that store a variety of file metadata.
        "401":
          description: Missing access key
        "403":
          description: Insufficient permissions
        "404":
          description: Requested file IDs do not exist
        "500":
          description: Server error
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get metadata about files in the client
      tags:
      - get_files
  /get_files/file:
    get:
      description: Retrieves a file based on `file_id` or `hash`. Requires appropriate
        access permissions.
      operationId: get_files_file
      parameters:
      - description: Numerical file ID for the file.
        explode: true
        in: query
        name: file_id
        required: false
        schema:
          type: integer
          nullable: true
        style: form
      - description: Hexadecimal SHA256 hash for the file. Can only be used if the
          user has access to all files.
        explode: true
        in: query
        name: hash
        required: false
        schema:
          pattern: "^[a-fA-F0-9]{64}$"
          type: string
        style: form
      - description: "If true, sets `Content-Disposition` to `attachment`, prompting\
          \ a download in browsers."
        explode: true
        in: query
        name: download
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: The requested file. The `Content-Type` header will reflect
            the file's MIME type.
        "400":
          description: Bad request. Missing or invalid parameters.
        "401":
          description: Unauthorized. Missing or invalid access key.
        "403":
          description: Forbidden. Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get a file
      tags:
      - get_files
  /get_files/thumbnail:
    get:
      description: Retrieves the thumbnail for a specific file based on either a file
        ID or hash. Returns default icons if the thumbnail doesn't exist.
      operationId: get_files_thumbnail
      parameters:
      - description: Numerical file ID for the file.
        explode: true
        in: query
        name: file_id
        required: false
        schema:
          type: integer
        style: form
      - description: Hexadecimal SHA256 hash for the file. Can only be used if access
          to all files is granted.
        explode: true
        in: query
        name: hash
        required: false
        schema:
          format: hex
          type: string
        style: form
      responses:
        "200":
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
            image/png:
              schema:
                format: binary
                type: string
          description: The thumbnail image.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions to access the file or perform the
            action.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get a file's thumbnail
      tags:
      - get_files
  /get_files/file_path:
    get:
      description: "Retrieves the local file system path, filetype, and size for a\
        \ specified file either by `file_id` or `hash`."
      operationId: get_files_file_path
      parameters:
      - explode: true
        in: query
        name: file_id
        required: false
        schema:
          description: Numerical file ID for the file.
          type: integer
        style: form
      - explode: true
        in: query
        name: hash
        required: false
        schema:
          description: Hexadecimal SHA256 hash of the file.
          pattern: "^[0-9a-fA-F]{64}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_files_file_path_200_response"
          description: "A JSON object containing the file path, type, and size."
        "400":
          description: "Bad request, invalid or missing parameters."
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions to access files or local paths.
        "404":
          description: The file does not exist or is not stored locally.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get the local file path and metadata.
      tags:
      - get_files
  /get_files/thumbnail_path:
    get:
      description: Returns the local file system path to the thumbnail of the specified
        file. Optionally includes the thumbnail's filetype.
      operationId: get_files_thumbnail_path
      parameters:
      - explode: true
        in: query
        name: file_id
        required: false
        schema:
          description: Numerical file ID for the file.
          type: integer
        style: form
      - explode: true
        in: query
        name: hash
        required: false
        schema:
          description: Hexadecimal SHA256 hash of the file.
          pattern: "^[a-fA-F0-9]{64}$"
          type: string
        style: form
      - explode: true
        in: query
        name: include_thumbnail_filetype
        required: false
        schema:
          default: false
          description: Whether to include the thumbnail's filetype in the response.
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_files_thumbnail_path_200_response"
          description: Path to the thumbnail on the host system.
        "400":
          description: Bad request. The file does not have a thumbnail.
        "404":
          description: The thumbnail should exist but does not or cannot be generated.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get the local thumbnail path for a file.
      tags:
      - get_files
  /get_files/local_file_storage_locations:
    get:
      description: Returns the local file storage locations as seen under **database->migrate
        files**.
      operationId: get_local_file_storage_locations
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_local_file_storage_locations_200_response"
          description: A list of file storage locations and their metadata
        "401":
          description: Missing or invalid access key
        "403":
          description: Insufficient permissions
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get local file storage locations
      tags:
      - get_files
  /get_files/render:
    get:
      description: "Retrieves a file (image or ugoira) rendered by Hydrus, optionally\
        \ resized or converted to a specific format."
      operationId: get_files_render
      parameters:
      - explode: true
        in: query
        name: file_id
        required: false
        schema:
          description: Numerical file id for the file.
          type: integer
        style: form
      - explode: true
        in: query
        name: hash
        required: false
        schema:
          description: Hexadecimal SHA256 hash for the file.
          type: string
        style: form
      - explode: true
        in: query
        name: download
        required: false
        schema:
          default: false
          description: "If true, sets Content-Disposition to attachment for downloading."
          type: boolean
        style: form
      - explode: true
        in: query
        name: render_format
        required: false
        schema:
          description: Filetype enum value to render the file to.
          example: "2 (PNG) for images, 23 (APNG) for ugoiras."
          type: integer
        style: form
      - explode: true
        in: query
        name: render_quality
        required: false
        schema:
          description: Quality or compression level for encoding the image.
          example: "1 for PNG, 80 for JPEG and WEBP."
          type: integer
        style: form
      - explode: true
        in: query
        name: width
        required: false
        schema:
          description: Width to scale the image to. Must be used with height.
          type: integer
        style: form
      - explode: true
        in: query
        name: height
        required: false
        schema:
          description: Height to scale the image to. Must be used with width.
          type: integer
        style: form
      responses:
        "200":
          content:
            image/png:
              schema:
                format: binary
                type: string
            image/jpeg:
              schema:
                format: binary
                type: string
            image/webp:
              schema:
                format: binary
                type: string
            image/apng:
              schema:
                format: binary
                type: string
          description: A rendered image or ugoira file.
        "400":
          description: Bad request (invalid or missing parameters).
        "401":
          description: Missing access key or session key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get an image or ugoira file as rendered by Hydrus
      tags:
      - get_files
  /manage_file_relationships/get_file_relationships:
    get:
      description: "Retrieve the current file relationships (e.g., duplicates, alternates)\
        \ for one or more files."
      operationId: manage_file_relationships_get_file_relationships
      parameters:
      - description: A single file ID.
        explode: true
        in: query
        name: file_id
        required: false
        schema:
          type: integer
          nullable: true
        style: form
      - description: A JSON-encoded and URL-encoded list of file IDs.
        explode: true
        in: query
        name: file_ids
        required: false
        schema:
          format: JSON
          type: string
        style: form
      - description: A single SHA256 hash.
        explode: true
        in: query
        name: hash
        required: false
        schema:
          type: string
        style: form
      - description: A JSON-encoded and URL-encoded list of SHA256 hashes.
        explode: true
        in: query
        name: hashes
        required: false
        schema:
          format: JSON
          type: string
        style: form
      - description: Optional file domain (service key) to filter the search.
        explode: true
        in: query
        name: file_service_key
        required: false
        schema:
          type: string
        style: form
      - description: Optional list of file domains (service keys) to filter the search.
        explode: true
        in: query
        name: file_service_keys
        required: false
        schema:
          format: JSON
          type: string
        style: form
      - description: Optional file domain (service key) to search deleted files from.
        explode: true
        in: query
        name: deleted_file_service_key
        required: false
        schema:
          type: string
        style: form
      - description: Optional list of file domains (service keys) to search deleted
          files from.
        explode: true
        in: query
        name: deleted_file_service_keys
        required: false
        schema:
          format: JSON
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileRelationshipsResponse"
          description: A JSON object mapping file hashes to their relationships.
        "400":
          description: Bad request – missing or invalid parameters.
        "401":
          description: Missing access key or session key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get file relationships for specified files.
      tags:
      - manage_file_relationships
  /manage_file_relationships/get_potentials_count:
    get:
      description: "Returns the count of remaining potential duplicate pairs in a\
        \ specified search domain, based on given filters and search type."
      operationId: manage_file_relationships_get_potentials_count
      parameters:
      - $ref: "#/components/parameters/file_service_key"
      - $ref: "#/components/parameters/file_service_keys"
      - $ref: "#/components/parameters/deleted_file_service_key"
      - $ref: "#/components/parameters/deleted_file_service_keys"
      - description: "Optional, defaults to 'all known tags'. Hexadecimal tag service\
          \ key."
        explode: true
        in: query
        name: tag_service_key_1
        required: false
        schema:
          example: c1ba23c60cda1051349647a151321d43ef5894aacdfb4b4e333d6c4259d56c5f
          format: hex
          type: string
        style: form
      - description: "Optional, defaults to ['system:everything']. List of tags to\
          \ filter the first side of pairs."
        explode: true
        in: query
        name: tags_1
        required: false
        schema:
          example:
          - dupes_to_process
          - system:width<400
          items:
            type: string
          type: array
        style: form
      - description: "Optional, defaults to 'all known tags'. Hexadecimal tag service\
          \ key for second tag filter."
        explode: true
        in: query
        name: tag_service_key_2
        required: false
        schema:
          example: c1ba23c60cda1051349647a151321d43ef5894aacdfb4b4e333d6c4259d56c5f
          format: hex
          type: string
        style: form
      - description: "Optional, defaults to ['system:everything']. List of tags to\
          \ filter the second side of pairs."
        explode: true
        in: query
        name: tags_2
        required: false
        schema:
          example:
          - dupes_to_process
          - system:width<400
          items:
            type: string
          type: array
        style: form
      - description: "Optional, integer. How the pairs should match the search(es).\
          \ Default is 0."
        explode: true
        in: query
        name: potentials_search_type
        required: false
        schema:
          enum:
          - 0
          - 1
          - 2
          type: integer
        style: form
      - description: "Optional, integer. Whether pairs should be pixel duplicates.\
          \ Default is 1."
        explode: true
        in: query
        name: pixel_duplicates
        required: false
        schema:
          enum:
          - 0
          - 1
          - 2
          type: integer
        style: form
      - description: "Optional, integer. Max 'search distance' of the pairs. Default\
          \ is 4."
        explode: true
        in: query
        name: max_hamming_distance
        required: false
        schema:
          example: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manage_file_relationships_get_potentials_count_200_response"
          description: JSON object containing the count of potential duplicate pairs.
        "400":
          description: Bad request due to invalid or missing parameters.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions to perform the action.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get the count of potential duplicate file pairs
      tags:
      - manage_file_relationships
  /manage_file_relationships/get_potential_pairs:
    get:
      description: "Retrieve a batch of potential duplicate file pairs based on search\
        \ criteria, similar to the duplicate filter in the client's duplicate processing\
        \ page."
      operationId: manage_file_relationships_get_potential_pairs
      parameters:
      - explode: true
        in: query
        name: file_service_key
        required: false
        schema:
          description: The hexadecimal key of the file service to search on. Defaults
            to 'all my files'.
          format: hex
          type: string
        style: form
      - explode: true
        in: query
        name: file_service_keys
        required: false
        schema:
          description: A list of hexadecimal keys for file services to search across.
            Overrides file_service_key if provided.
          items:
            format: hex
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: deleted_file_service_key
        required: false
        schema:
          description: The hexadecimal key of the file service to search deleted files
            from.
          format: hex
          type: string
        style: form
      - explode: true
        in: query
        name: deleted_file_service_keys
        required: false
        schema:
          description: A list of hexadecimal keys for file services to search deleted
            files from.
          items:
            format: hex
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: tag_service_key_1
        required: false
        schema:
          description: Tag service key for the first set of tags. Defaults to 'all
            known tags'.
          format: hex
          type: string
        style: form
      - explode: true
        in: query
        name: tags_1
        required: false
        schema:
          description: A list of tags to filter the first set of files.
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: tag_service_key_2
        required: false
        schema:
          description: Tag service key for the second set of tags. Defaults to 'all
            known tags'.
          format: hex
          type: string
        style: form
      - explode: true
        in: query
        name: tags_2
        required: false
        schema:
          description: A list of tags to filter the second set of files.
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: potentials_search_type
        required: false
        schema:
          description: |
            How the pairs should match the search:
            - 0: Match both tags_1 and tags_2
            - 1: Match tags_1 or tags_2
            - 2: Match only tags_1
          enum:
          - 0
          - 1
          - 2
          type: integer
        style: form
      - explode: true
        in: query
        name: pixel_duplicates
        required: false
        schema:
          description: |
            Whether to include pixel duplicates:
            - 0: No
            - 1: Yes
            - 2: Only
          enum:
          - 0
          - 1
          - 2
          type: integer
        style: form
      - explode: true
        in: query
        name: max_hamming_distance
        required: false
        schema:
          default: 4
          description: The maximum allowed Hamming distance between perceptual hashes.
          type: integer
        style: form
      - explode: true
        in: query
        name: max_num_pairs
        required: false
        schema:
          description: The maximum number of duplicate pairs to return in this batch.
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manage_file_relationships_get_potential_pairs_200_response"
          description: A list of potential duplicate file hash pairs.
        "400":
          description: "Bad request, invalid or missing parameters."
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Expired or invalid session key.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get potential duplicate pairs for processing
      tags:
      - manage_file_relationships
  /manage_file_relationships/get_random_potentials:
    get:
      description: Exactly the same as the 'show some random potential dupes' button
        in the duplicate processing page.
      operationId: manage_file_relationships_get_random_potentials
      parameters:
      - explode: true
        in: query
        name: file_service_key
        required: false
        schema:
          format: hex
          type: string
        style: form
      - explode: true
        in: query
        name: file_service_keys
        required: false
        schema:
          items:
            format: hex
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: deleted_file_service_key
        required: false
        schema:
          format: hex
          type: string
        style: form
      - explode: true
        in: query
        name: deleted_file_service_keys
        required: false
        schema:
          items:
            format: hex
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: tag_service_key_1
        required: false
        schema:
          format: hex
          type: string
        style: form
      - explode: true
        in: query
        name: tags_1
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: tag_service_key_2
        required: false
        schema:
          format: hex
          type: string
        style: form
      - explode: true
        in: query
        name: tags_2
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: potentials_search_type
        required: false
        schema:
          enum:
          - 0
          - 1
          - 2
          type: integer
        style: form
      - explode: true
        in: query
        name: pixel_duplicates
        required: false
        schema:
          enum:
          - 0
          - 1
          - 2
          type: integer
        style: form
      - explode: true
        in: query
        name: max_hamming_distance
        required: false
        schema:
          type: integer
          nullable: true
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manage_file_relationships_get_random_potentials_200_response"
            application/cbor:
              schema:
                $ref: "#/components/schemas/manage_file_relationships_get_random_potentials_200_response"
          description: A JSON Object listing a group of hashes exactly as the client
            would.
        "400":
          description: Missing or invalid parameter.
        "401":
          description: Missing access key or session cookie.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session expired/invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get some random potentially duplicate file hashes.
      tags:
      - manage_file_relationships
  /manage_file_relationships/remove_potentials:
    post:
      description: Removes all potential pairs that any of the specified files are
        a part of. This operation ensures that the files will no longer appear as
        part of any potential relationships.
      operationId: manage_file_relationships_remove_potentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Files"
        required: true
      responses:
        "200":
          description: Success. No content returned.
        "400":
          description: Bad request. Missing or invalid parameters.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions to perform the operation.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Remove all potential file relationships for specified files
      tags:
      - manage_file_relationships
  /manage_file_relationships/set_file_relationships:
    post:
      description: "Set relationships (e.g., duplicates, alternates, same quality)\
        \ between pairs of files."
      operationId: manage_file_relationships_set_file_relationships
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_file_relationships_set_file_relationships_request"
        required: true
      responses:
        "200":
          content: {}
          description: Relationships set successfully.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Set file relationships
      tags:
      - manage_file_relationships
  /manage_file_relationships/set_kings:
    post:
      description: Promotes the specified files to be the "king" of their respective
        duplicate groups. This operation is idempotent and processes files in the
        order they are provided.
      operationId: manage_file_relationships_set_kings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_file_relationships_set_kings_request"
        required: true
      responses:
        "200":
          content: {}
          description: Files successfully promoted to kings.
        "400":
          description: Invalid or missing parameters.
        "401":
          description: Missing access key or session key.
        "403":
          description: Insufficient permissions to manage file relationships.
        "419":
          description: Session key expired.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
        Hydrus-Client-API-Session-Key: []
      summary: Set files as kings of their duplicate groups
      tags:
      - manage_file_relationships
  /manage_services/get_pending_counts:
    get:
      description: "Returns a JSON object with pending content counts for all upload-capable\
        \ services. Includes [The Services Object](#services_object)."
      operationId: manage_services_get_pending_counts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manage_services_get_pending_counts_200_response"
          description: A JSON object containing services and their pending counts.
        "401":
          description: Missing or invalid access key or insufficient permissions.
        "403":
          description: Insufficient permissions.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get the counts of pending content for each upload-capable service
      tags:
      - manage_services
  /manage_services/commit_pending:
    post:
      description: Starts the upload job for a service's pending content. Returns
        immediately after initiating the job.
      operationId: manage_services_commit_pending
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_services_commit_pending_request"
        required: true
      responses:
        "200":
          description: The upload job was successfully initiated.
        "400":
          description: Missing or invalid parameter.
        "401":
          description: Access key or session key missing.
        "403":
          description: Insufficient permissions to perform the action.
        "409":
          description: The job is already running.
        "419":
          description: Session key expired or invalid.
        "422":
          description: "Unable to start the job due to a system issue (e.g., repository\
            \ paused, unsynced account)."
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Start the job to upload a service's pending content
      tags:
      - manage_services
  /manage_services/forget_pending:
    post:
      description: "Clears all pending content for a specified service, similar to\
        \ clicking 'forget' in the client UI."
      operationId: manage_services_forget_pending
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_services_forget_pending_request"
        required: true
      responses:
        "200":
          description: "Success, no content returned"
        "400":
          description: "Bad request, invalid or missing parameters"
        "401":
          description: "Unauthorized, missing access key or session key"
        "403":
          description: "Permission denied, insufficient access rights"
        "419":
          description: Session key expired or invalid
        "500":
          description: Internal server error
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Forget all pending content for a service
      tags:
      - manage_services
  /manage_cookies/get_cookies:
    get:
      description: Retrieves cookies associated with the specified domain.
      operationId: manage_cookies_get_cookies
      parameters:
      - description: The domain for which to retrieve cookies
        explode: true
        in: query
        name: domain
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manage_cookies_get_cookies_200_response"
          description: A JSON Object listing all the cookies for that domain
        "401":
          description: Access key or session key missing.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get cookies for a specific domain
      tags:
      - manage_cookies
  /manage_cookies/set_cookies:
    post:
      description: "Sets new cookies for the client, useful for copying logins from\
        \ a browser."
      operationId: manage_cookies_set_cookies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_cookies_set_cookies_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manage_cookies_set_cookies_200_response"
          description: Cookies set successfully.
        "400":
          description: Bad request. Missing or invalid parameters.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions to perform the action.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Set cookies for the client
      tags:
      - manage_cookies
  /manage_headers/get_headers:
    get:
      description: Retrieves the custom HTTP headers for a specified domain or globally.
      operationId: manage_headers_get_headers
      parameters:
      - explode: true
        in: query
        name: domain
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manage_headers_get_headers_200_response"
          description: A JSON object listing all headers
        "401":
          description: Missing or invalid access key
        "403":
          description: Insufficient permissions
        "500":
          description: Internal server error
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get custom HTTP headers
      tags:
      - manage_headers
  /manage_headers/set_headers:
    post:
      description: Sets or deletes custom HTTP headers for a specific domain or globally.
        Requires Manage Cookies and Headers permission.
      operationId: manage_headers_set_headers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_headers_set_headers_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manage_headers_set_headers_200_response"
          description: Headers successfully updated.
        "400":
          description: Bad request. Missing or invalid parameters.
        "401":
          description: Missing access key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Manages custom HTTP headers for domains or globally
      tags:
      - manage_headers
  /manage_headers/set_user_agent:
    post:
      description: This endpoint allows setting or resetting the global User-Agent
        string used by the Hydrus client. This is useful for mimicking a specific
        browser or resetting to the default.
      operationId: manage_headers_set_user_agent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_headers_set_user_agent_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manage_headers_set_headers_200_response"
          description: Operation successful
        "400":
          description: "Bad request, typically due to invalid parameters."
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions to perform the operation.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Sets the global User-Agent for the client
      tags:
      - manage_headers
  /manage_pages/get_pages:
    get:
      operationId: manage_pages_get_pages
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagesResponse"
          description: A JSON object representing the page structure.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get the page structure of the current UI session.
      tags:
      - manage_pages
  /manage_pages/get_page_info:
    get:
      description: "Retrieves detailed information about a specific page, primarily\
        \ related to downloader pages. This endpoint is under construction and may\
        \ return extensive data depending on the page type."
      operationId: manage_pages_get_page_info
      parameters:
      - description: "The hexadecimal key of the page to retrieve info for, as returned\
          \ by `/manage_pages/get_pages`."
        explode: true
        in: query
        name: page_key
        required: true
        schema:
          format: hexadecimal
          type: string
        style: form
      - description: "If true, returns a simplified version of the page info. If false,\
          \ returns more detailed information, including all hashes in the media panel."
        explode: true
        in: query
        name: simple
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageInfoResponse"
          description: A JSON object containing the page's information.
        "400":
          description: Invalid or missing parameters.
        "401":
          description: Missing access key or session cookie.
        "403":
          description: Insufficient permissions.
        "500":
          description: Server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get information about a specific page
      tags:
      - manage_pages
  /manage_pages/add_files:
    post:
      description: Appends files to a specified page. Restricted to users with 'Manage
        Pages' permission.
      operationId: manage_pages_add_files
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_pages_add_files_request"
        required: true
      responses:
        "200":
          content: {}
          description: Files were successfully added to the page.
        "400":
          description: "Invalid request, such as adding files to a non-media page."
        "404":
          description: The specified page key was not found.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions to perform the action.
        "419":
          description: Expired or invalid session key.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Add files to a page
      tags:
      - manage_pages
  /manage_pages/focus_page:
    post:
      description: "Brings a specific page into focus in the main GUI. If the page\
        \ is already in focus, no change is made."
      operationId: manage_pages_focus_page
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_pages_focus_page_request"
        required: true
      responses:
        "200":
          content: {}
          description: Page successfully focused.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions to manage pages.
        "404":
          description: Page key not found.
        "419":
          description: Expired or invalid session key.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Focus a specific page in the GUI
      tags:
      - manage_pages
  /manage_pages/refresh_page:
    post:
      description: Refresh a page in the main GUI. This will cause file search pages
        to perform their search again and re-sort files for other page types.
      operationId: manage_pages_refresh_page
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_pages_refresh_page_request"
        required: true
      responses:
        "200":
          description: Page successfully refreshed. No content returned.
        "401":
          description: Missing or invalid access key
        "403":
          description: Insufficient permissions to perform the action
        "404":
          description: Page key not found
        "500":
          description: Server error
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Refresh a page in the main GUI
      tags:
      - manage_pages
  /manage_popups/get_popup:
    get:
      description: Retrieve detailed information about a popup job status using its
        key.
      operationId: get_popup
      parameters:
      - description: The hex key identifying the job status.
        explode: true
        in: query
        name: key
        required: true
        schema:
          format: hex
          type: string
        style: form
      - explode: false
        in: header
        name: Hydrus-Client-API-Access-Key
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: Hydrus-Client-API-Session-Key
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobStatus"
          description: A JobStatus object.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get a popup job status by key.
      tags:
      - manage_popups
  /manage_popups/get_popups:
    get:
      description: Retrieves a list of popup job statuses currently active or recently
        completed in the client.
      operationId: manage_popups_get_popups
      parameters:
      - explode: true
        in: query
        name: only_in_view
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobStatusesResponse"
          description: A list of job status objects representing popups.
        "401":
          description: Access key or session key missing or invalid.
        "403":
          description: Insufficient permissions to manage popups.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get a list of popups from the client
      tags:
      - manage_popups
  /manage_popups/add_popup:
    post:
      description: Adds a new popup job status object. Requires Manage Popups permission.
      operationId: manage_popups_add_popuip
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_popups_add_popuip_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobStatusObject"
          description: Job status object was successfully added.
        "400":
          description: "Bad request, missing or invalid parameters."
        "401":
          description: Missing access key or invalid session key.
        "403":
          description: Insufficient permissions to perform the action.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Add a popup
      tags:
      - manage_popups
  /manage_popups/call_user_callable:
    post:
      description: Calls the user callable function of a popup identified by the job
        status key. Requires Manage Pages permission.
      operationId: manage_popups_call_user_callable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_popups_call_user_callable_request"
        required: true
      responses:
        "200":
          description: Success. No content returned.
        "400":
          description: "Bad request, missing or invalid parameter."
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Call the user callable function of a popup
      tags:
      - manage_popups
  /manage_popups/cancel_popup:
    post:
      operationId: manage_popups_cancel_popup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_popups_cancel_popup_request"
        required: true
      responses:
        "200":
          description: Success. No content returned.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Try to cancel a popup
      tags:
      - manage_popups
  /manage_popups/dismiss_popup:
    post:
      description: |
        Dismiss a popup. This action is intended for observers (i.e., users who did not create the job). If the job is ongoing (not done), the dismissal has no effect.
      operationId: manage_popups_dismiss_popup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_popups_dismiss_popup_request"
        required: true
      responses:
        "200":
          content: {}
          description: Popup dismissed successfully.
        "400":
          description: Invalid or missing parameter.
        "401":
          description: Access key or session key missing.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Dismiss a popup
      tags:
      - manage_popups
  /manage_popups/finish_popup:
    post:
      description: "Marks a popup job as done. This should only be used on jobs created\
        \ by the caller. It clears pausable/cancellable statuses and sets `is_done`,\
        \ allowing the user to dismiss the popup."
      operationId: manage_popups_finish_popup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_popups_finish_popup_request"
        required: true
      responses:
        "200":
          content: {}
          description: Popup successfully marked as done.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Mark a popup as done
      tags:
      - manage_popups
  /manage_popups/finish_and_dismiss_popup:
    post:
      description: Finish a popup job and dismiss it either immediately or after a
        delay.
      operationId: manage_popups_finish_and_dismiss_popup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_popups_finish_and_dismiss_popup_request"
        required: true
      responses:
        "200":
          description: Success. No content returned.
        "400":
          description: Bad request. Missing or invalid parameters.
        "401":
          description: Unauthorized. Missing or invalid access key.
        "403":
          description: Forbidden. Insufficient permissions.
        "419":
          description: Session timeout. Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Finish and dismiss a popup
      tags:
      - manage_popups
  /manage_popups/update_popup:
    post:
      description: Update a popup with a job status key and optional fields.
      operationId: manage_popups_update_popuip
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/manage_popups_update_popuip_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manage_popups_update_popuip_200_response"
          description: Job status object updated.
        "400":
          description: Invalid or missing parameter.
        "401":
          description: Missing access key or insufficient permissions.
        "403":
          description: Insufficient permissions.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
        Hydrus-Client-API-Session-Key: []
      summary: Update a popup
      tags:
      - manage_popups
  /manage_database/force_commit:
    post:
      description: |
        Hydrus holds a constant `BEGIN IMMEDIATE` transaction on its database. Separate jobs are 'transactionalised' using `SAVEPOINT`, and the real transactions are only `COMMIT`-ed to disk every 30 seconds or so. Thus, if the client crashes, a user can lose up to 30 seconds of changes (or more, if they use the launch path to extend the inter-transaction duration).

        This command lets you force a `COMMIT` as soon as possible. The request will only return when the commit is done and finished, so you can trust when this returns 200 OK that you are in the clear and everything is saved. If the database is currently disconnected (e.g. there is a vacuum going on), then it returns very fast, but you can typically expect it to take a handful of milliseconds. If there is a normal database job already happening when you call, it will `COMMIT` when that is complete, and if things are really busy (e.g. amidst idle-time repository processing) then there could be hundreds of megabytes to write. This job may, when the database is under strain, take ten or more seconds to complete.
      operationId: manage_database_force_commit
      responses:
        "200":
          content: {}
          description: Database successfully committed.
        "401":
          description: Missing or invalid access key.
        "403":
          description: Insufficient permissions.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
        Hydrus-Client-API-Session-Key: []
      summary: Force the database to write all pending changes to disk immediately.
      tags:
      - manage_database
  /manage_database/lock_on:
    post:
      description: Pauses the client's database activity and disconnects the current
        connection. All API calls except unlock will return 503 while locked.
      operationId: manage_database_lock_on
      responses:
        "200":
          content: {}
          description: Database successfully locked
        "401":
          description: Access key or session key missing or invalid
        "403":
          description: Insufficient permissions
        "419":
          description: Session key expired
        "500":
          description: Internal server error
        "503":
          description: Database already locked
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Lock the client's database
      tags:
      - manage_database
  /manage_database/lock_off:
    post:
      description: "Reconnect the client's database and resume processing its job\
        \ queue. If the UI was frozen, it should free up shortly after this operation."
      operationId: manage_database_lock_off
      responses:
        "200":
          content: {}
          description: Success. No content returned.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Reconnect the client's database and resume activity.
      tags:
      - manage_database
  /manage_database/mr_bones:
    get:
      description: "Retrieves statistics about the database, optionally filtered by\
        \ tags and file domains."
      operationId: manage_database_mr_bones
      parameters:
      - description: A list of tags to filter the search.
        explode: true
        in: query
        name: tags
        required: false
        schema:
          example:
          - blonde_hair
          - blue_eyes
          items:
            type: string
          type: array
        style: form
      - description: The hexadecimal key of the file service domain to search.
        explode: true
        in: query
        name: file_service_key
        required: false
        schema:
          example: 6c6f63616c2066696c6573
          type: string
        style: form
      - description: A list of hexadecimal keys of file service domains to search.
        explode: true
        in: query
        name: file_service_keys
        required: false
        schema:
          example:
          - 6c6f63616c2066696c6573
          - "7472617368"
          items:
            type: string
          type: array
        style: form
      - description: The hexadecimal key of the file service domain from which files
          have been deleted.
        explode: true
        in: query
        name: deleted_file_service_key
        required: false
        schema:
          example: 6c6f63616c2066696c6573
          type: string
        style: form
      - description: A list of hexadecimal keys of file service domains from which
          files have been deleted.
        explode: true
        in: query
        name: deleted_file_service_keys
        required: false
        schema:
          example:
          - 6c6f63616c2066696c6573
          - "7472617368"
          items:
            type: string
          type: array
        style: form
      - description: The hexadecimal key of the tag domain to search.
        explode: true
        in: query
        name: tag_service_key
        required: false
        schema:
          example: c6f63616c2074616773
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manage_database_mr_bones_200_response"
          description: A JSON object containing the database statistics.
        "400":
          description: Bad request. Missing or invalid parameters.
        "401":
          description: Missing access key or session key.
        "403":
          description: Insufficient permissions for the requested action.
        "419":
          description: Session key expired or invalid.
        "500":
          description: Internal server error.
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Get database statistics similar to the 'How boned am I?' dialog
      tags:
      - manage_database
  /manage_database/get_client_options:
    get:
      description: Retrieves nearly all client options as a JSON dump. The response
        structure is unstable and subject to change without warning.
      operationId: manage_database_get_client_options
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
          description: A JSON dump of the client options
        "401":
          description: Missing or invalid access key
        "403":
          description: Insufficient permissions to access this endpoint
      security:
      - Hydrus-Client-API-Access-Key: []
      - Hydrus-Client-API-Session-Key: []
      summary: Gets the current options from the client
      tags:
      - manage_database
components:
  parameters:
    file_service_key:
      description: Hexadecimal service key for a file domain to search.
      explode: true
      in: query
      name: file_service_key
      required: false
      schema:
        example: 6c6f63616c2066696c6573
        format: hex
        type: string
      style: form
    file_service_keys:
      description: List of hexadecimal service keys for a union of file domains to
        search.
      explode: true
      in: query
      name: file_service_keys
      required: false
      schema:
        example:
        - 6c6f63616c2066696c6573
        - ae7d9a603008919612894fc360130ae3d9925b8577d075cd0473090ac38b12b6
        items:
          format: hex
          type: string
        type: array
      style: form
    deleted_file_service_key:
      description: Hexadecimal service key for a file domain to search deleted files.
      explode: true
      in: query
      name: deleted_file_service_key
      required: false
      schema:
        example: 7472617368
        format: hex
        type: string
      style: form
    deleted_file_service_keys:
      description: List of hexadecimal service keys for a union of file domains to
        search deleted files.
      explode: true
      in: query
      name: deleted_file_service_keys
      required: false
      schema:
        example:
        - 7472617368
        - 616c6c206c6f63616c2066696c6573
        items:
          format: hex
          type: string
        type: array
      style: form
  schemas:
    ServicesObject:
      additionalProperties:
        $ref: "#/components/schemas/Service"
    Service:
      example:
        service_key: service_key
        min_stars: 6
        name: name
        type_pretty: type_pretty
        type: 0
        star_shape: star_shape
        max_stars: 1
      properties:
        name:
          type: string
        type:
          type: integer
        type_pretty:
          type: string
        service_key:
          format: hex
          type: string
        star_shape:
          type: string
          nullable: true
        min_stars:
          type: integer
          nullable: true
        max_stars:
          type: integer
          nullable: true
      required:
      - name
      - service_key
      - type
      - type_pretty
    ClearFileDeletionRecordRequest:
      additionalProperties: false
      example:
        file_id: 0
        file_ids:
        - 6
        - 6
        hashes:
        - hashes
        - hashes
        hash: hash
      properties:
        file_id:
          description: A numerical file id.
          type: integer
        file_ids:
          items:
            description: A list of numerical file ids.
            type: integer
          type: array
        hash:
          description: A hexadecimal SHA256 hash.
          type: string
        hashes:
          items:
            description: A list of hexadecimal SHA256 hashes.
            type: string
          type: array
      nullable: true
    MigrateFilesRequest:
      description: Request body for migrating files to one or more local file domains.
      example:
        file_service_key: file_service_key
        deleted_file_service_keys:
        - deleted_file_service_keys
        - deleted_file_service_keys
        file_service_keys:
        - file_service_keys
        - file_service_keys
        file_id: 0
        file_ids:
        - 6
        - 6
        hashes:
        - hashes
        - hashes
        deleted_file_service_key: deleted_file_service_key
        hash: hash
      properties:
        file_id:
          description: A specific file ID to migrate.
          type: integer
        file_ids:
          items:
            description: A list of file IDs to migrate.
            type: integer
          type: array
        hash:
          description: A SHA256 hash of the file to migrate.
          type: string
        hashes:
          items:
            description: A list of SHA256 hashes of files to migrate.
            type: string
          type: array
        file_service_key:
          description: A hexadecimal service key of the destination local file domain.
          type: string
        file_service_keys:
          items:
            description: A list of hexadecimal service keys for destination local
              file domains.
            type: string
          type: array
        deleted_file_service_key:
          description: Hexadecimal service key for a deleted file domain (not typically
            used here).
          type: string
        deleted_file_service_keys:
          items:
            description: List of deleted file domain service keys (not typically used
              here).
            type: string
          type: array
      nullable: true
    ArchiveFilesRequest:
      description: "A request to archive files. Can specify files via file_id, file_ids,\
        \ hash, or hashes."
      example:
        file_id: 0
        file_ids:
        - 6
        - 6
        hashes:
        - hashes
        - hashes
        hash: hash
      properties:
        file_id:
          description: Numerical file ID.
          type: integer
        file_ids:
          description: List of numerical file IDs.
          items:
            type: integer
          type: array
        hash:
          description: SHA256 hash of the file.
          type: string
        hashes:
          description: List of SHA256 hashes.
          items:
            type: string
          type: array
    UnarchiveFilesRequest:
      example:
        file_id: 0
        file_ids:
        - 6
        - 6
        hashes:
        - hashes
        - hashes
        hash: hash
      properties:
        file_id:
          description: A single file ID to unarchive.
          type: integer
        file_ids:
          items:
            description: A list of file IDs to unarchive.
            type: integer
          type: array
        hash:
          description: A hexadecimal SHA256 hash of a file to unarchive.
          type: string
        hashes:
          items:
            description: A list of hexadecimal SHA256 hashes of files to unarchive.
            type: string
          type: array
      nullable: true
    UrlInfo:
      example:
        url_type_string: url_type_string
        url_type: 0
        normalised_url: https://openapi-generator.tech
        request_url: https://openapi-generator.tech
        can_parse: true
        match_name: match_name
      properties:
        request_url:
          description: "The URL used for server requests, potentially including ephemeral\
            \ tokens or redirect paths."
          format: uri
          type: string
        normalised_url:
          description: The normalized version of the URL used for comparison and storage.
          format: uri
          type: string
        url_type:
          description: "The type of URL, as determined by the client."
          enum:
          - 0
          - 2
          - 3
          - 4
          - 5
          type: integer
        url_type_string:
          description: A human-readable string describing the URL type.
          type: string
        match_name:
          description: "The name of the matching URL class, if one exists."
          type: string
        can_parse:
          description: Whether the client can parse the URL into meaningful content.
          type: boolean
    GetSiblingsAndParentsResponse:
      example:
        services:
          key:
            service_key: service_key
            min_stars: 6
            name: name
            type_pretty: type_pretty
            type: 0
            star_shape: star_shape
            max_stars: 1
        tags:
          key:
            key:
              ideal_tag: ideal_tag
              siblings:
              - siblings
              - siblings
              ancestors:
              - ancestors
              - ancestors
              descendants:
              - descendants
              - descendants
      properties:
        services:
          additionalProperties:
            $ref: "#/components/schemas/Service"
        tags:
          additionalProperties:
            additionalProperties:
              $ref: "#/components/schemas/GetSiblingsAndParentsResponse_tags_value_value"
      required:
      - services
      - tags
    IncrementFileViewtimeRequest:
      additionalProperties: false
      example:
        canvas_type: 1
        file_id: 0
        viewtime: 7.061401241503109
        file_ids:
        - 6
        - 6
        hashes:
        - hashes
        - hashes
        timestamp_ms: 5
        hash: hash
        views: 2
        timestamp: 5.962133916683182
      properties:
        file_id:
          description: A numerical file id.
          type: integer
        file_ids:
          items:
            description: A list of numerical file ids.
            type: integer
          type: array
        hash:
          description: A hexadecimal SHA256 hash.
          type: string
        hashes:
          items:
            description: A list of hexadecimal SHA256 hashes.
            type: string
          type: array
        canvas_type:
          description: The canvas type you are editing.
          type: integer
        timestamp:
          description: Optional float or int of the "last viewed time" in seconds.
          type: number
        timestamp_ms:
          description: Optional int of the "last viewed time" in milliseconds.
          type: integer
        views:
          description: Optional number of views to add. Defaults to 1.
          type: integer
        viewtime:
          description: Required float indicating how long the user viewed the file.
          type: number
      required:
      - canvas_type
      - viewtime
      nullable: true
    SelectiveParameter:
      description: Only one of `hash` or `file_id` should be provided
      type: object
    FileMetadata:
      properties:
        file_id:
          type: integer
        hash:
          type: string
        size:
          type: integer
        mime:
          type: string
        filetype_forced:
          type: boolean
        filetype_human:
          type: string
        filetype_enum:
          type: integer
        ext:
          type: string
        width:
          type: integer
        height:
          type: integer
        thumbnail_width:
          type: integer
        thumbnail_height:
          type: integer
        duration:
          type: integer
          nullable: true
        time_modified:
          type: integer
          nullable: true
        time_modified_details:
          type: object
        file_services:
          $ref: "#/components/schemas/FileMetadata_file_services"
        ipfs_multihashes:
          type: object
        has_audio:
          type: boolean
        blurhash:
          type: string
        pixel_hash:
          type: string
        num_frames:
          type: integer
          nullable: true
        num_words:
          type: integer
          nullable: true
        is_inbox:
          type: boolean
        is_local:
          type: boolean
        is_trashed:
          type: boolean
        is_deleted:
          type: boolean
        has_exif:
          type: boolean
        has_human_readable_embedded_metadata:
          type: boolean
        has_icc_profile:
          type: boolean
        has_transparency:
          type: boolean
        known_urls:
          items:
            type: string
          type: array
        ratings:
          type: object
        tags:
          type: object
        file_viewing_statistics:
          items:
            $ref: "#/components/schemas/FileMetadata_file_viewing_statistics_inner"
          type: array
    FileRelationship:
      example:
        "0":
        - "0"
        - "0"
        "1":
        - "1"
        - "1"
        king_is_on_file_domain: true
        "3":
        - "3"
        - "3"
        is_king: true
        king: 8784afbfd8b59de3dcf2c13dc1be9d7cb0b3d376803c8a7a8b710c7c191bb657
        "8":
        - "8"
        - "8"
        king_is_local: true
      properties:
        is_king:
          description: Whether this file is the king of its duplicate group.
          type: boolean
        king:
          description: The SHA256 hash of the king file of the group.
          example: 8784afbfd8b59de3dcf2c13dc1be9d7cb0b3d376803c8a7a8b710c7c191bb657
          type: string
        king_is_on_file_domain:
          description: Whether the king file exists on the specified file domain.
          type: boolean
        king_is_local:
          description: Whether the king file is present on the local disk.
          type: boolean
        "0":
          description: List of potential duplicate hashes.
          items:
            type: string
          type: array
        "1":
          description: List of false positive hashes.
          items:
            type: string
          type: array
        "3":
          description: List of alternate hashes.
          items:
            type: string
          type: array
        "8":
          description: List of duplicate hashes.
          items:
            type: string
          type: array
      required:
      - "0"
      - "1"
      - "3"
      - "8"
      - is_king
      - king
      - king_is_local
      - king_is_on_file_domain
    FileRelationshipsResponse:
      example:
        file_relationships:
          key:
            "0":
            - "0"
            - "0"
            "1":
            - "1"
            - "1"
            king_is_on_file_domain: true
            "3":
            - "3"
            - "3"
            is_king: true
            king: 8784afbfd8b59de3dcf2c13dc1be9d7cb0b3d376803c8a7a8b710c7c191bb657
            "8":
            - "8"
            - "8"
            king_is_local: true
      properties:
        file_relationships:
          additionalProperties:
            $ref: "#/components/schemas/FileRelationship"
      required:
      - file_relationships
    Files:
      additionalProperties: false
      example:
        file_id: 0
        file_ids:
        - 6
        - 6
        hashes:
        - hashes
        - hashes
        hash: hash
      properties:
        file_id:
          description: The unique ID of a file to remove potential relationships for.
          type: integer
        file_ids:
          items:
            description: A list of file IDs to remove potential relationships for.
            type: integer
          type: array
        hash:
          description: The SHA256 hash of a file to remove potential relationships
            for.
          format: hex
          type: string
        hashes:
          items:
            description: A list of SHA256 hashes of files to remove potential relationships
              for.
            format: hex
            type: string
          type: array
      nullable: true
    PagesResponse:
      example:
        hydrus_version: 6
        pages:
          page_key: page_key
          pages:
          - null
          - null
          page_state: 1
          page_type: 5
          name: name
          is_media_page: true
          selected: true
        version: 0
      properties:
        version:
          description: API version.
          type: integer
        hydrus_version:
          description: Hydrus client version.
          type: integer
        pages:
          $ref: "#/components/schemas/Page"
    Page:
      example:
        page_key: page_key
        pages:
        - null
        - null
        page_state: 1
        page_type: 5
        name: name
        is_media_page: true
        selected: true
      properties:
        name:
          description: The full text on the page tab.
          type: string
        page_key:
          description: Unique identifier for the page.
          type: string
        page_state:
          description: "State of the page (0 ready, 1 initialising, 2 searching/loading,\
            \ 3 search cancelled)."
          type: integer
        page_type:
          description: "Type of the page (e.g., 6 File search, 10 Page of pages)."
          type: integer
        is_media_page:
          description: Whether the page holds thumbnails.
          type: boolean
        selected:
          description: Whether the page is currently in view.
          type: boolean
        pages:
          items:
            $ref: "#/components/schemas/Page"
          type: array
    PageInfoResponse:
      example:
        hydrus_version: 6
        page_info:
          page_key: page_key
          page_state: 1
          page_type: 5
          management:
            multiple_watcher_import:
              highlight: highlight
              watcher_imports:
              - watcher_key: cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85
                files_paused: false
                last_check_time: 1566164272
                imports:
                  simple_status: 4
                  total_processed: 4
                  total_to_process: 4
                  status: 4 successful (2 already in db)
                created: 1566164269
                subject: gundam pictures
                checking_paused: false
                checking_status: 0
                next_check_time: 1566174272
                url: https://someimageboard.net/m/123456
                gallery_log:
                  simple_status: 4
                  total_processed: 4
                  total_to_process: 4
                  status: 4 successful (2 already in db)
              - watcher_key: cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85
                files_paused: false
                last_check_time: 1566164272
                imports:
                  simple_status: 4
                  total_processed: 4
                  total_to_process: 4
                  status: 4 successful (2 already in db)
                created: 1566164269
                subject: gundam pictures
                checking_paused: false
                checking_status: 0
                next_check_time: 1566174272
                url: https://someimageboard.net/m/123456
                gallery_log:
                  simple_status: 4
                  total_processed: 4
                  total_to_process: 4
                  status: 4 successful (2 already in db)
          name: name
          is_media_page: true
        media:
          num_files: 4
        version: 0
      properties:
        version:
          description: API version.
          type: integer
        hydrus_version:
          description: Hydrus client version.
          type: integer
        page_info:
          $ref: "#/components/schemas/PageInfoResponse_page_info"
        media:
          $ref: "#/components/schemas/PageInfoResponse_media"
    WatcherImport:
      example:
        watcher_key: cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85
        files_paused: false
        last_check_time: 1566164272
        imports:
          simple_status: 4
          total_processed: 4
          total_to_process: 4
          status: 4 successful (2 already in db)
        created: 1566164269
        subject: gundam pictures
        checking_paused: false
        checking_status: 0
        next_check_time: 1566174272
        url: https://someimageboard.net/m/123456
        gallery_log:
          simple_status: 4
          total_processed: 4
          total_to_process: 4
          status: 4 successful (2 already in db)
      properties:
        url:
          example: https://someimageboard.net/m/123456
          type: string
        watcher_key:
          example: cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85
          type: string
        created:
          example: 1566164269
          type: integer
        last_check_time:
          example: 1566164272
          type: integer
        next_check_time:
          example: 1566174272
          type: integer
        files_paused:
          example: false
          type: boolean
        checking_paused:
          example: false
          type: boolean
        checking_status:
          example: 0
          type: integer
        subject:
          example: gundam pictures
          type: string
        imports:
          $ref: "#/components/schemas/ImportInfo"
        gallery_log:
          $ref: "#/components/schemas/ImportInfo"
    ImportInfo:
      example:
        simple_status: 4
        total_processed: 4
        total_to_process: 4
        status: 4 successful (2 already in db)
      properties:
        status:
          example: 4 successful (2 already in db)
          type: string
        simple_status:
          example: 4
          type: string
        total_processed:
          example: 4
          type: integer
        total_to_process:
          example: 4
          type: integer
    JobStatus:
      example:
        creation_time: 0.8008282
        status_title: status_title
        nice_string: nice_string
        is_pausable: true
        is_working: true
        status_text_2: status_text_2
        status_text_1: status_text_1
        api_data: "{}"
        attached_files_mergable: true
        is_deleted: true
        network_job:
          current_speed: 5
          domain_ok: true
          no_engine_yet: true
          is_done: true
          bytes_to_read: 7
          waiting_on_connection_error: true
          waiting_on_serverside_bandwidth: true
          bytes_read: 2
          status_text: status_text
          url: url
          total_data_used: 5
          has_error: true
        is_cancellable: true
        is_paused: true
        popup_gauge_2:
        - 1.4658129805029452
        - 1.4658129805029452
        popup_gauge_1:
        - 6.027456183070403
        - 6.027456183070403
        files:
          hashes:
          - hashes
          - hashes
          label: label
        user_callable_label: user_callable_label
        had_error: true
        traceback: traceback
        key: key
        is_cancelled: true
      properties:
        key:
          description: Hex key identifying the job status.
          type: string
        creation_time:
          description: UNIX timestamp when the job status was created.
          format: float
          type: number
        status_title:
          description: Title for the job status.
          type: string
        status_text_1:
          description: First line of body text.
          type: string
        status_text_2:
          description: Second line of body text.
          type: string
        had_error:
          description: Whether the job status has an error.
          type: boolean
        traceback:
          description: Traceback text if an error occurred.
          type: string
        is_cancellable:
          description: Whether the job can be canceled.
          type: boolean
        is_cancelled:
          description: Whether the job has been canceled.
          type: boolean
        is_deleted:
          description: Whether the job status has been dismissed but not removed.
          type: boolean
        is_pausable:
          description: Whether the job can be paused.
          type: boolean
        is_paused:
          description: Whether the job is currently paused.
          type: boolean
        is_working:
          description: Whether the job is currently working.
          type: boolean
        nice_string:
          description: Human-readable representation of the job status.
          type: string
        attached_files_mergable:
          description: Whether files in the job can be merged with another job.
          type: boolean
        popup_gauge_1:
          description: "Progress bar values [current, max]."
          items:
            format: integer
            type: number
          type: array
        popup_gauge_2:
          description: "Progress bar values [current, max]."
          items:
            format: integer
            type: number
          type: array
        api_data:
          description: Arbitrary data for API clients.
          type: object
        files:
          $ref: "#/components/schemas/JobStatus_files"
        user_callable_label:
          description: Label for the button to trigger a user callable function.
          type: string
        network_job:
          $ref: "#/components/schemas/JobStatus_network_job"
      required:
      - creation_time
      - key
    JobStatusesResponse:
      example:
        job_statuses:
        - creation_time: 0.8008282
          status_title: status_title
          nice_string: nice_string
          is_pausable: true
          is_working: true
          status_text_2: status_text_2
          status_text_1: status_text_1
          api_data: "{}"
          attached_files_mergable: true
          is_deleted: true
          network_job:
            current_speed: 5
            domain_ok: true
            no_engine_yet: true
            is_done: true
            bytes_to_read: 7
            waiting_on_connection_error: true
            waiting_on_serverside_bandwidth: true
            bytes_read: 2
            status_text: status_text
            url: url
            total_data_used: 5
            has_error: true
          is_cancellable: true
          is_paused: true
          popup_gauge_2:
          - 1.4658129805029452
          - 1.4658129805029452
          popup_gauge_1:
          - 6.027456183070403
          - 6.027456183070403
          files:
            hashes:
            - hashes
            - hashes
            label: label
          user_callable_label: user_callable_label
          had_error: true
          traceback: traceback
          key: key
          is_cancelled: true
        - creation_time: 0.8008282
          status_title: status_title
          nice_string: nice_string
          is_pausable: true
          is_working: true
          status_text_2: status_text_2
          status_text_1: status_text_1
          api_data: "{}"
          attached_files_mergable: true
          is_deleted: true
          network_job:
            current_speed: 5
            domain_ok: true
            no_engine_yet: true
            is_done: true
            bytes_to_read: 7
            waiting_on_connection_error: true
            waiting_on_serverside_bandwidth: true
            bytes_read: 2
            status_text: status_text
            url: url
            total_data_used: 5
            has_error: true
          is_cancellable: true
          is_paused: true
          popup_gauge_2:
          - 1.4658129805029452
          - 1.4658129805029452
          popup_gauge_1:
          - 6.027456183070403
          - 6.027456183070403
          files:
            hashes:
            - hashes
            - hashes
            label: label
          user_callable_label: user_callable_label
          had_error: true
          traceback: traceback
          key: key
          is_cancelled: true
      properties:
        job_statuses:
          items:
            $ref: "#/components/schemas/JobStatus"
          type: array
      required:
      - job_statuses
    FilesMetadata:
      properties:
        hashes:
          items:
            type: string
          type: array
        label:
          type: string
    NetworkJobMetadata:
      properties:
        url:
          type: string
        waiting_on_connection_error:
          type: boolean
        domain_ok:
          type: boolean
        waiting_on_serverside_bandwidth:
          type: boolean
        no_engine_yet:
          type: boolean
        has_error:
          type: boolean
        total_data_used:
          type: integer
          nullable: true
        is_done:
          type: boolean
        status_text:
          type: string
        current_speed:
          type: integer
          nullable: true
        bytes_read:
          type: integer
          nullable: true
        bytes_to_read:
          type: integer
          nullable: true
    JobStatusObject:
      example:
        attached_files_mergable: true
        status_title: status_title
        job_id: job_id
        is_cancellable: true
        is_pausable: true
        popup_gauge_2:
        - 6
        - 6
        popup_gauge_1:
        - 0
        - 0
        files:
          hashes:
          - hashes
          - hashes
          label: label
        status_text_2: status_text_2
        status_text_1: status_text_1
        api_data: "{}"
      properties:
        job_id:
          description: Unique identifier for the job status.
          type: string
        is_cancellable:
          description: Whether the job can be cancelled.
          type: boolean
        is_pausable:
          description: Whether the job can be paused.
          type: boolean
        attached_files_mergable:
          description: Whether attached files can be merged.
          type: boolean
        status_title:
          description: Title of the job status.
          type: string
        status_text_1:
          description: First line of status text.
          type: string
        status_text_2:
          description: Second line of status text.
          type: string
        popup_gauge_1:
          description: "Gauge values as [current, max]."
          items:
            type: integer
          type: array
        popup_gauge_2:
          description: "Second gauge values as [current, max]."
          items:
            type: integer
          type: array
        api_data:
          description: Custom data associated with the job.
          type: object
        files:
          $ref: "#/components/schemas/JobStatusObject_files"
    api_version_200_response:
      example:
        hydrus_version: 6
        version: 0
      properties:
        version:
          type: integer
        hydrus_version:
          type: integer
          nullable: true
      required:
      - hydrus_version
      - version
    request_new_permissions_200_response:
      example:
        access_key: access_key
      properties:
        access_key:
          description: "64-character hexadecimal access key, valid after user approval"
          type: string
      required:
      - access_key
    session_key_200_response:
      example:
        session_key: session_key
      properties:
        session_key:
          description: Hexadecimal string representing the session key
          type: string
      required:
      - session_key
    verify_access_key_200_response:
      example:
        permits_everything: true
        name: name
        human_description: human_description
        basic_permissions:
        - 0
        - 0
      properties:
        name:
          description: The name of the access key's permissions profile.
          type: string
        permits_everything:
          description: Whether the key grants full access to all API functions.
          type: boolean
        basic_permissions:
          description: List of permission codes the key grants.
          items:
            type: integer
            nullable: true
          type: array
        human_description:
          description: A human-readable description of the permissions granted.
          type: string
    get_service_200_response_service:
      properties:
        name:
          description: The human-readable name of the service.
          type: string
        service_key:
          description: The unique hex identifier of the service.
          type: string
        type:
          description: The service type as an integer enum.
          type: integer
        type_pretty:
          description: A human-readable description of the service type.
          type: string
    get_service_200_response:
      example:
        service:
          name: my tags
          service_key: 6c6f63616c2074616773
          type: 5
          type_pretty: local tag service
      properties:
        service:
          $ref: "#/components/schemas/get_service_200_response_service"
    get_service_404_response:
      example:
        error: error
      properties:
        error:
          description: Error message indicating the service was not found.
          type: string
    get_service_400_response:
      example:
        error: error
      properties:
        error:
          description: Error message indicating invalid or missing parameters.
          type: string
    add_files_add_file_request:
      example:
        path: E:\to_import\ayanami.jpg
      properties:
        path:
          description: The filesystem path to the file to import.
          type: string
        delete_after_successful_import:
          description: Optional. Whether to delete the source file after a successful
            import. Defaults to false.
          type: boolean
        file_service_key:
          description: Optional. The hexadecimal key of a local file domain to import
            the file into.
          type: string
        file_service_keys:
          description: Optional. A list of hexadecimal keys of local file domains
            to import the file into.
          items:
            type: string
          type: array
    add_files_add_file_200_response:
      example:
        status: 1
        hash: 29a15ad0c035c0a0e86e2591660207db64b10777ced76565a695102a481c3dd1
        note: ""
      properties:
        status:
          description: The import status code.
          enum:
          - 1
          - 2
          - 3
          - 4
          - 7
          type: integer
        hash:
          description: The SHA256 hash of the file in hexadecimal format.
          type: string
        note:
          description: Human-readable note related to the import result.
          type: string
        traceback:
          description: "Present only on failure, contains debugging traceback."
          type: string
    add_files_delete_files_request:
      example:
        hash: 78f92ba4a786225ee2a1236efa6b7dc81dd729faf4af99f96f3e20bad6d8b538
      properties:
        file_id:
          description: A single file ID to delete.
          type: integer
        file_ids:
          items:
            description: A list of file IDs to delete.
            type: integer
          type: array
        hash:
          description: A single file hash (SHA256) to delete.
          type: string
        hashes:
          items:
            description: A list of file hashes (SHA256) to delete.
            type: string
          type: array
        file_service_key:
          description: Optional file domain key to restrict deletion to a specific
            domain.
          type: string
        file_service_keys:
          items:
            description: Optional list of file domain keys to delete from multiple
              domains.
            type: string
          type: array
        deleted_file_service_key:
          description: Optional file domain key to delete files previously deleted
            from that domain.
          type: string
        deleted_file_service_keys:
          items:
            description: Optional list of file domain keys to delete files previously
              deleted from those domains.
            type: string
          type: array
        reason:
          description: Optional reason for the deletion.
          type: string
      nullable: true
    add_files_undelete_files_request:
      properties:
        file_id:
          description: A single file ID to undelete.
          type: integer
        file_ids:
          items:
            description: A list of file IDs to undelete.
            type: integer
          type: array
        hash:
          description: A SHA256 hash of a file to undelete.
          type: string
        hashes:
          items:
            description: A list of SHA256 hashes of files to undelete.
            type: string
          type: array
        file_service_key:
          description: |
            Optional file service key (hexadecimal) to restrict undeletion to.
            Defaults to "all my files".
          type: string
        file_service_keys:
          items:
            description: |
              Optional list of file service keys (hexadecimal) to restrict undeletion to.
              Defaults to "all my files".
            type: string
          type: array
        deleted_file_service_key:
          description: |
            Optional deleted file service key (hexadecimal) to restrict undeletion from.
          type: string
        deleted_file_service_keys:
          items:
            description: |
              Optional list of deleted file service keys (hexadecimal) to restrict undeletion from.
            type: string
          type: array
      nullable: true
    add_files_generate_hashes_request:
      example:
        path: E:\to_import\ayanami.jpg
      properties:
        path:
          description: The file system path of the file to import and generate hashes
            for.
          type: string
    add_files_generate_hashes_200_response:
      example:
        hash: 7de421a3f9be871a7037cca8286b149a31aecb6719268a94188d76c389fa140c
        perceptual_hashes:
        - b44dc7b24dcb381c
        pixel_hash: c7bf20e5c4b8a524c2c3e3af2737e26975d09cba2b3b8b76341c4c69b196da4e
      properties:
        hash:
          description: SHA256 hash of the file
          type: string
        perceptual_hashes:
          description: List of perceptual hashes (only present for supported file
            types)
          items:
            type: string
          type: array
        pixel_hash:
          description: SHA256 hash of the pixel data of the rendered image (only present
            for images)
          type: string
    add_urls_get_url_files_200_response_url_file_statuses_inner:
      properties:
        status:
          description: |
            Status of the file:
            - 0: File not in database, ready for import
            - 2: File already in database
            - 3: File previously deleted
          enum:
          - 0
          - 2
          - 3
          type: integer
        hash:
          description: SHA256 hash of the file in hexadecimal.
          type: string
        note:
          description: Optional human-readable note about the file.
          type: string
    add_urls_get_url_files_200_response:
      example:
        normalised_url: https://somebooru.org/index.php?id=123456&page=post&s=view
        url_file_statuses:
        - status: 2
          hash: 529af82eee3660008a51823ee4ca0c40d1b4d59b6e2f7418e8b23f2d9c01b1fb
          note: "url recognised: Imported at 2015/10/18 10:58:01, which was 3 years\
            \ 4 months ago (before this check)."
      properties:
        normalised_url:
          format: uri
          type: string
        url_file_statuses:
          items:
            $ref: "#/components/schemas/add_urls_get_url_files_200_response_url_file_statuses_inner"
          type: array
    add_urls_add_url_request:
      example:
        url: https://someimageboard.org/cool/res/12345.html
        destination_page_name: kino zone
        service_keys_to_additional_tags:
          "6c6f63616c2074616773":
          - from /cool/
      properties:
        url:
          description: The URL to import.
          type: string
        destination_page_key:
          description: Optional page key to specify where the URL should be added.
          type: string
        destination_page_name:
          description: "Optional page name to specify where the URL should be added.\
            \ If not found, a new page will be created."
          type: string
        file_service_key:
          description: Optional file service key to specify where the file should
            be imported.
          type: string
        file_service_keys:
          description: Optional list of file service keys to specify where the file
            should be imported.
          items:
            type: string
          type: array
        deleted_file_service_key:
          description: Optional deleted file service key to specify a deleted domain.
          type: string
        deleted_file_service_keys:
          description: Optional list of deleted file service keys to specify deleted
            domains.
          items:
            type: string
          type: array
        show_destination_page:
          default: false
          description: Whether to switch to the destination page after adding the
            URL.
          type: boolean
        service_keys_to_additional_tags:
          additionalProperties:
            items: {}
          description: "Tags to be added to the imported file, mapped by service key."
        filterable_tags:
          description: Tags to be filtered and processed by the tag import options.
          items:
            type: string
          type: array
    add_urls_add_url_200_response:
      example:
        human_result_text: '"https://someimageboard.org/cool/res/12345.html" URL added
          successfully.'
        normalised_url: https://someimageboard.org/cool/res/12345.html
      properties:
        human_result_text:
          description: A human-readable result message.
          type: string
        normalised_url:
          description: The normalised URL.
          type: string
    add_urls_associate_url_request:
      example:
        url_to_add: https://somebooru.org/index.php?id=12345&page=post&s=view
        hash: 529af82eee3660008a51823ee4ca0c40d1b4d59b6e2f7418e8b23f2d9c01b1fb
      properties:
        file_id:
          type: integer
          nullable: true
        file_ids:
          items:
            type: integer
            nullable: true
          type: array
        hash:
          example: 529af82eee3660008a51823ee4ca0c40d1b4d59b6e2f7418e8b23f2d9c01b1fb
          type: string
        hashes:
          items:
            example: 529af82eee3660008a51823ee4ca0c40d1b4d59b6e2f7418e8b23f2d9c01b1fb
            type: string
          type: array
        url_to_add:
          type: string
        urls_to_add:
          items:
            type: string
          type: array
        url_to_delete:
          type: string
        urls_to_delete:
          items:
            type: string
          type: array
        normalise_urls:
          default: true
          type: boolean
    add_tags_clean_tags_200_response:
      example:
        tags:
        - "9"
        - "10"
        - "11"
        - ' ::)'
        - bikini
        - blue eyes
        - character:samus aran
        - flower
        - wew
      properties:
        tags:
          example:
          - "9"
          - "10"
          - "11"
          - ' ::)'
          - bikini
          - blue eyes
          - character:samus aran
          - flower
          - wew
          items:
            type: string
          type: array
      required:
      - tags
    add_tags_get_favourite_tags_200_response:
      example:
        hydrus_version: hydrus_version
        favourite_tags:
        - favourite_tags
        - favourite_tags
        version: 0
      properties:
        favourite_tags:
          description: The list of favourite tags.
          items:
            type: string
          type: array
        version:
          description: The version of the Client API.
          type: integer
        hydrus_version:
          description: The version of the Hydrus Client hosting the API.
          type: string
      required:
      - favourite_tags
    add_tags_search_tags_200_response_tags_inner:
      example:
        count: 1
        value: value
      properties:
        value:
          type: string
        count:
          type: integer
          nullable: true
      required:
      - count
      - value
    add_tags_search_tags_200_response:
      example:
        hydrus_version: 6
        version: 0
        tags:
        - count: 1
          value: value
        - count: 1
          value: value
      properties:
        version:
          description: The version of the API.
          type: integer
        hydrus_version:
          description: The version of the Hydrus client.
          type: integer
        tags:
          items:
            $ref: "#/components/schemas/add_tags_search_tags_200_response_tags_inner"
          type: array
      required:
      - hydrus_version
      - tags
      - version
    add_tags_add_tags_request_service_keys_to_actions_to_tags_value_value_inner:
      oneOf:
      - type: string
      - items:
          type: string
        type: array
    add_tags_add_tags_request:
      example:
        hash: df2a7b286d21329fc496e3aa8b8a08b67bb1747ca32749acb3f5d544cbfc0f56
        service_keys_to_tags:
          "6c6f63616c2074616773":
          - character:supergirl
          - rating:safe
      properties:
        file_id:
          description: Numerical ID of a single file.
          type: integer
        file_ids:
          description: List of numerical IDs for multiple files.
          items:
            type: integer
            nullable: true
          type: array
        hash:
          description: SHA256 hash of a single file.
          type: string
        hashes:
          description: List of SHA256 hashes for multiple files.
          items:
            type: string
          type: array
        service_keys_to_tags:
          additionalProperties:
            items: {}
          description: Maps service keys to lists of tags to be added to the files.
        service_keys_to_actions_to_tags:
          additionalProperties:
            additionalProperties:
              description: "Maps service keys to actions (as strings) and lists of\
                \ tags. Each tag can be a string or a [tag, reason] pair."
              items:
                $ref: "#/components/schemas/add_tags_add_tags_request_service_keys_to_actions_to_tags_value_value_inner"
        override_previously_deleted_mappings:
          default: true
          description: "If true, allows overriding mappings previously deleted. If\
            \ false, skips adding previously deleted mappings."
          type: boolean
        create_new_deleted_mappings:
          default: true
          description: "If true, creates delete records even for tags not currently\
            \ on the file. If false, only deletes existing mappings."
          type: boolean
    add_tags_set_favourite_tags_request:
      properties:
        set:
          description: "If provided, this list will completely overwrite the existing\
            \ favourite tags."
          items:
            type: string
          type: array
        add:
          description: Optional. A list of tags to add to the current favourite tags.
          items:
            type: string
          type: array
        remove:
          description: Optional. A list of tags to remove from the current favourite
            tags.
          items:
            type: string
          type: array
      nullable: true
    add_tags_set_favourite_tags_200_response:
      example:
        hydrus_version: 6
        version: 0
        favourite_tags:
        - favourite_tags
        - favourite_tags
      properties:
        version:
          description: The version of the Hydrus Client API.
          type: integer
        hydrus_version:
          description: The version of the Hydrus software running the API.
          type: integer
        favourite_tags:
          description: The updated list of favourite tags.
          items:
            type: string
          type: array
    edit_ratings_set_rating_request_rating:
      oneOf:
      - description: Boolean value for Like/Dislike ratings.
        type: boolean
      - description: Integer value for Numerical or Inc/Dec ratings.
        type: integer
      nullable: true
    edit_ratings_set_rating_request:
      example:
        hash: 3b820114f658d768550e4e3d4f1dced3ff8db77443472b5ad93700647ad2d3ba
        rating_service_key: 282303611ba853659aa60aeaa5b6312d40e05b58822c52c57ae5e320882ba26e
        rating: 2
      properties:
        hash:
          description: SHA256 hash of the file.
          example: 3b820114f658d768550e4e3d4f1dced3ff8db77443472b5ad93700647ad2d3ba
          type: string
        hashes:
          description: List of SHA256 hashes of the files.
          example:
          - 3b820114f658d768550e4e3d4f1dced3ff8db77443472b5ad93700647ad2d3ba
          - 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08
          items:
            type: string
          type: array
        file_id:
          description: Numerical ID of the file.
          example: 12345
          type: integer
        file_ids:
          description: List of numerical IDs of the files.
          example:
          - 12345
          - 67890
          items:
            type: integer
            nullable: true
          type: array
        rating_service_key:
          description: Hexadecimal key of the rating service.
          example: 282303611ba853659aa60aeaa5b6312d40e05b58822c52c57ae5e320882ba26e
          type: string
        rating:
          $ref: "#/components/schemas/edit_ratings_set_rating_request_rating"
      required:
      - rating
      - rating_service_key
      nullable: true
    edit_times_set_file_viewtime_request:
      properties:
        file_id:
          description: A numerical file ID.
          type: integer
        file_ids:
          description: An array of numerical file IDs.
          items:
            type: integer
            nullable: true
          type: array
        hash:
          description: A hexadecimal SHA256 hash.
          type: string
        hashes:
          description: An array of hexadecimal SHA256 hashes.
          items:
            type: string
          type: array
        canvas_type:
          description: "The canvas type being edited (e.g. 0 for Media Viewer, 1 for\
            \ Preview Viewer, 4 for Client API Viewer)."
          type: integer
        timestamp:
          description: Optional. The last viewed time in seconds (float or integer).
          type: number
        timestamp_ms:
          description: Optional. The last viewed time in milliseconds.
          type: integer
        views:
          description: The number of views to set.
          type: integer
        viewtime:
          description: The total viewtime to set (in seconds).
          type: number
      required:
      - canvas_type
      - views
      - viewtime
      nullable: true
    edit_times_set_time_request:
      properties:
        file_id:
          description: A numerical file id.
          type: integer
        file_ids:
          description: A list of numerical file ids.
          items:
            type: integer
            nullable: true
          type: array
        hash:
          description: A hexadecimal SHA256 hash.
          type: string
        hashes:
          description: A list of hexadecimal SHA256 hashes.
          items:
            type: string
          type: array
        timestamp:
          type: number
          nullable: true
        timestamp_ms:
          type: integer
          nullable: true
        timestamp_type:
          description: The type of timestamp you are editing.
          type: integer
        file_service_key:
          description: "Hexadecimal, the file service you are editing in 'imported'/'deleted'/'previously\
            \ imported'."
          type: string
        canvas_type:
          description: "Int, the canvas type you are editing in 'last viewed'."
          type: integer
        domain:
          description: "String, the domain you are editing in 'modified (web domain)'."
          type: string
      required:
      - timestamp_type
      nullable: true
    add_notes_set_notes_request:
      description: Notes to associate with the file
      properties:
        notes:
          additionalProperties:
            type: string
        hash:
          description: Only one of `hash` or `file_id` should be provided
          type: object
        file_id:
          description: Only one of `hash` or `file_id` should be provided
          type: object
        merge_cleverly:
          default: false
          type: boolean
        extend_existing_note_if_possible:
          default: true
          type: boolean
        conflict_resolution:
          default: 3
          enum:
          - 0
          - 1
          - 2
          - 3
          type: integer
      required:
      - notes
    add_notes_set_notes_200_response:
      description: "The actual notes applied, which may differ from the request when\
        \ merge_cleverly is enabled"
      example:
        notes:
          key: notes
      properties:
        notes:
          additionalProperties:
            type: string
    add_notes_delete_notes_request:
      example:
        note_names:
        - note name
        - another note
        hash: 3b820114f658d768550e4e3d4f1dced3ff8db77443472b5ad93700647ad2d3ba
      properties:
        note_names:
          description: A list of note names to delete from the file.
          items:
            type: string
          type: array
        hash:
          description: SHA256 hash of the file (64 hexadecimal characters).
          pattern: "^[a-fA-F0-9]{64}$"
          type: string
        file_id:
          description: Numerical identifier for the file.
          type: integer
      nullable: true
    get_files_search_files_200_response:
      example:
        file_ids:
        - 125462
        - 4852415
        - 123
        - 591415
      properties:
        file_ids:
          description: A list of numerical file IDs.
          example:
          - 125462
          - 4852415
          - 123
          items:
            type: integer
            nullable: true
          type: array
        hashes:
          description: A list of SHA256 hashes.
          example:
          - 1b04c4df7accd5a61c5d02b36658295686b0abfebdc863110e7d7249bba3f9ad
          - fe416723c731d679aa4d20e9fd36727f4a38cd0ac6d035431f0f452fad54563f
          items:
            format: hex
            type: string
          type: array
    get_files_file_hashes_200_response:
      example:
        hashes:
          ec5c5a4d7da4be154597e283f0b6663c: 2a0174970defa6f147f2eabba829c5b05aba1f1aea8b978611a07b7bb9cf9399
      properties:
        hashes:
          additionalProperties:
            description: Mapping of source hash to desired hash type
            type: string
    get_files_file_metadata_200_response:
      example:
        services:
          c6f63616c2074616773:
            name: my tags
            type: 5
            type_pretty: local tag service
        metadata:
        - file_id: 123
          hash: 4c77267f93415de0bc33b7725b8c331a809a924084bee03ab2f5fae1c6019eb2
          size: 63405
          mime: image/jpeg
          filetype_forced: false
          filetype_human: jpeg
          filetype_enum: 1
          ext: .jpg
          width: 640
          height: 480
          thumbnail_width: 200
          thumbnail_height: 150
          duration: null
          time_modified: null
          time_modified_details: {}
          file_services:
            current: {}
            deleted: {}
          ipfs_multihashes: {}
          has_audio: false
          blurhash: U6PZfSi_.AyE_3t7t7R**0o#DgR4_3R*D%xt
          pixel_hash: 2519e40f8105599fcb26187d39656b1b46f651786d0e32fff2dc5a9bc277b5bb
          num_frames: null
          num_words: null
          is_inbox: false
          is_local: false
          is_trashed: false
          is_deleted: false
          has_exif: true
          has_human_readable_embedded_metadata: true
          has_icc_profile: true
          has_transparency: false
          known_urls: []
          ratings:
            "74d52c6238d25f846d579174c11856b1aaccdb04a185cb2c79f0d0e499284f2c": null
            "90769255dae5c205c975fc4ce2efff796b8be8a421f786c1737f87f98187ffaf": null
            b474e0cbbab02ca1479c12ad985f1c680ea909a54eb028e3ad06750ea40d4106: 0
          tags:
            "6c6f63616c2074616773":
              storage_tags: {}
              display_tags: {}
            "37e3849bda234f53b0e9792a036d14d4f3a9a136d1cb939705dbcd5287941db4":
              storage_tags: {}
              display_tags: {}
            "616c6c206b6e6f776e2074616773":
              storage_tags: {}
              display_tags: {}
          file_viewing_statistics:
          - canvas_type: 0
            canvas_type_pretty: media viewer
            views: 0
            viewtime: 0
            last_viewed_timestamp: null
          - canvas_type: 1
            canvas_type_pretty: preview viewer
            views: 0
            viewtime: 0
            last_viewed_timestamp: null
          - canvas_type: 4
            canvas_type_pretty: client api viewer
            views: 0
            viewtime: 0
            last_viewed_timestamp: null
      properties:
        services:
          additionalProperties:
            $ref: "#/components/schemas/Service"
        metadata:
          items:
            $ref: "#/components/schemas/FileMetadata"
          type: array
    get_files_file_path_200_response:
      example:
        path: path
        filetype: filetype
        size: 0
      properties:
        path:
          description: The full file system path to the file on the host system.
          type: string
        filetype:
          description: The MIME type of the file.
          type: string
        size:
          description: The size of the file in bytes.
          type: integer
    get_files_thumbnail_path_200_response:
      example:
        path: path
        filetype: image/png
      properties:
        path:
          description: The file system path to the thumbnail.
          type: string
        filetype:
          description: "The MIME type of the thumbnail (e.g., `image/png` or `image/jpeg`)."
          example: image/png
          type: string
          nullable: true
      required:
      - path
    get_local_file_storage_locations_200_response_locations_inner:
      example:
        path: path
        prefixes:
        - prefixes
        - prefixes
        max_num_bytes: 6
        ideal_weight: 0
      properties:
        path:
          description: The file system path of the storage location
          type: string
        ideal_weight:
          description: A weight indicating the preferred storage balance (higher =
            more files should be moved here)
          type: integer
        max_num_bytes:
          description: "Maximum number of bytes allowed in this location, or null\
            \ if unlimited"
          type: integer
          nullable: true
        prefixes:
          items:
            description: List of file hash prefixes stored in this location
            type: string
          type: array
    get_local_file_storage_locations_200_response:
      example:
        locations:
        - path: path
          prefixes:
          - prefixes
          - prefixes
          max_num_bytes: 6
          ideal_weight: 0
        - path: path
          prefixes:
          - prefixes
          - prefixes
          max_num_bytes: 6
          ideal_weight: 0
      properties:
        locations:
          items:
            $ref: "#/components/schemas/get_local_file_storage_locations_200_response_locations_inner"
          type: array
      required:
      - locations
    manage_file_relationships_get_potentials_count_200_response:
      example:
        potential_duplicates_count: 0
      properties:
        potential_duplicates_count:
          description: The number of potential duplicate pairs remaining.
          type: integer
      required:
      - potential_duplicates_count
    manage_file_relationships_get_potential_pairs_200_response:
      example:
        potential_duplicate_pairs:
        - - potential_duplicate_pairs
          - potential_duplicate_pairs
        - - potential_duplicate_pairs
          - potential_duplicate_pairs
      properties:
        potential_duplicate_pairs:
          description: "A list of pairs, each containing two SHA256 hashes representing\
            \ potential duplicates."
          items:
            items:
              format: sha256
              type: string
            type: array
          type: array
    manage_file_relationships_get_random_potentials_200_response:
      example:
        random_potential_duplicate_hashes:
        - random_potential_duplicate_hashes
        - random_potential_duplicate_hashes
      properties:
        random_potential_duplicate_hashes:
          items:
            format: hex
            type: string
          type: array
      required:
      - random_potential_duplicate_hashes
    manage_file_relationships_set_file_relationships_request_relationships_inner:
      properties:
        hash_a:
          description: Hexadecimal SHA256 hash of file A.
          type: string
        hash_b:
          description: Hexadecimal SHA256 hash of file B.
          type: string
        relationship:
          description: Relationship type.
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 7
          type: integer
        do_default_content_merge:
          description: Whether to apply the user's default content merge settings.
          type: boolean
        delete_a:
          default: false
          description: Whether to delete file A in the same operation.
          type: boolean
          nullable: true
        delete_b:
          default: false
          description: Whether to delete file B in the same operation.
          type: boolean
          nullable: true
      required:
      - do_default_content_merge
      - hash_a
      - hash_b
      - relationship
    manage_file_relationships_set_file_relationships_request:
      example:
        relationships:
        - hash_a: b54d09218e0d6efc964b78b070620a1fa19c7e069672b4c6313cee2c9b0623f2
          hash_b: bbaa9876dab238dcf5799bfd8319ed0bab805e844f45cf0de33f40697b11a845
          relationship: 4
          do_default_content_merge: true
          delete_b: true
        - hash_a: 22667427eaa221e2bd7ef405e1d2983846c863d40b2999ce8d1bf5f0c18f5fb2
          hash_b: 65d228adfa722f3cd0363853a191898abe8bf92d9a514c6c7f3c89cfed0bf423
          relationship: 4
          do_default_content_merge: true
          delete_b: true
        - hash_a: 0480513ffec391b77ad8c4e57fe80e5b710adfa3cb6af19b02a0bd7920f2d3ec
          hash_b: 5fab162576617b5c3fc8caabea53ce3ab1a3c8e0a16c16ae7b4e4a21eab168a7
          relationship: 2
          do_default_content_merge: true
      properties:
        relationships:
          items:
            $ref: "#/components/schemas/manage_file_relationships_set_file_relationships_request_relationships_inner"
          type: array
    manage_file_relationships_set_kings_request:
      properties:
        file_id:
          description: The file ID to promote to king of its duplicate group.
          type: integer
        file_ids:
          description: "A list of file IDs to promote. Processed in order; if two\
            \ files belong to the same group, the last one in the list becomes the\
            \ king."
          items:
            type: integer
            nullable: true
          type: array
        hash:
          description: The SHA256 hash of the file to promote.
          type: string
        hashes:
          description: "A list of SHA256 hashes of files to promote. Processed in\
            \ order; if two files belong to the same group, the last one in the list\
            \ becomes the king."
          items:
            type: string
          type: array
      nullable: true
    manage_services_get_pending_counts_200_response_pending_counts_value:
      properties:
        pending_tag_mappings:
          description: Count of pending tag mappings.
          type: integer
        petitioned_tag_mappings:
          description: Count of petitioned tag mappings.
          type: integer
        pending_tag_siblings:
          description: Count of pending tag siblings.
          type: integer
        petitioned_tag_siblings:
          description: Count of petitioned tag siblings.
          type: integer
        pending_tag_parents:
          description: Count of pending tag parents.
          type: integer
        petitioned_tag_parents:
          description: Count of petitioned tag parents.
          type: integer
        pending_files:
          description: Count of pending files.
          type: integer
        petitioned_files:
          description: Count of petitioned files.
          type: integer
      required:
      - pending_tag_mappings
      - pending_tag_parents
      - pending_tag_siblings
      - petitioned_tag_mappings
      - petitioned_tag_parents
      - petitioned_tag_siblings
    manage_services_get_pending_counts_200_response:
      example:
        services:
          c6f63616c2074616773:
            name: my tags
            type: 5
            type_pretty: local tag service
          "5674450950748cfb28778b511024cfbf0f9f67355cf833de632244078b5a6f8d":
            name: example tag repo
            type: 0
            type_pretty: hydrus tag repository
        pending_counts:
          ae91919b0ea95c9e636f877f57a69728403b65098238c1a121e5ebf85df3b87e:
            pending_tag_mappings: 11564
            petitioned_tag_mappings: 5
            pending_tag_siblings: 2
            petitioned_tag_siblings: 0
            pending_tag_parents: 0
            petitioned_tag_parents: 0
          "3902aabc3c4c89d1b821eaa9c011be3047424fd2f0c086346e84794e08e136b0":
            pending_tag_mappings: 0
            petitioned_tag_mappings: 0
            pending_tag_siblings: 0
            petitioned_tag_siblings: 0
            pending_tag_parents: 0
            petitioned_tag_parents: 0
          e06e1ae35e692d9fe2b83cde1510a11ecf495f51910d580681cd60e6f21fde73:
            pending_files: 2
            petitioned_files: 0
      properties:
        services:
          additionalProperties:
            $ref: "#/components/schemas/Service"
        pending_counts:
          additionalProperties:
            $ref: "#/components/schemas/manage_services_get_pending_counts_200_response_pending_counts_value"
    manage_services_commit_pending_request:
      example:
        service_key: ae91919b0ea95c9e636f877f57a69728403b65098238c1a121e5ebf85df3b87e
      properties:
        service_key:
          description: The service key of the service whose pending content should
            be committed.
          type: string
    manage_services_forget_pending_request:
      properties:
        service_key:
          description: The hexadecimal service key for which to forget pending content.
          type: string
      required:
      - service_key
    manage_cookies_get_cookies_200_response:
      example:
        cookies:
        - - __cfduid
          - f1bef65041e54e93110a883360bc7e71
          - .somebooru.org
          - /
          - "1596223327"
        - - pass_hash
          - 0b0833b797f108e340b315bc5463c324
          - somebooru.org
          - /
          - "1585855361"
        - - user_id
          - "123456"
          - someboeru.org
          - /
          - "1585855361"
      properties:
        cookies:
          items:
            items:
              type: string
            type: array
          type: array
    manage_cookies_set_cookies_request:
      properties:
        cookies:
          items:
            items:
              type: string
            maxItems: 5
            minItems: 5
            type: array
          type: array
      required:
      - cookies
    manage_cookies_set_cookies_200_response:
      example:
        hydrus_version: 6
        version: 0
      properties:
        version:
          description: The version of the Client API.
          type: integer
        hydrus_version:
          description: The version of the Client hosting the API.
          type: integer
    manage_headers_get_headers_200_response_network_context:
      example:
        data: data
        type: 0
      properties:
        type:
          type: integer
          nullable: true
        data:
          type: string
      required:
      - data
      - type
    manage_headers_get_headers_200_response_headers_value:
      example:
        reason: reason
        approved: approved
        value: value
      properties:
        value:
          type: string
        approved:
          enum:
          - approved
          - denied
          - unknown
          type: string
        reason:
          type: string
    manage_headers_get_headers_200_response:
      example:
        headers:
          key:
            reason: reason
            approved: approved
            value: value
        network_context:
          data: data
          type: 0
      properties:
        network_context:
          $ref: "#/components/schemas/manage_headers_get_headers_200_response_network_context"
        headers:
          additionalProperties:
            $ref: "#/components/schemas/manage_headers_get_headers_200_response_headers_value"
      required:
      - headers
      - network_context
    manage_headers_set_headers_request_headers_value:
      properties:
        value:
          description: "The value of the header. If null, deletes the header."
          type: string
          nullable: true
        approved:
          description: Optional approval status for validation system.
          enum:
          - approved
          - denied
          - pending
          type: string
        reason:
          description: Optional reason for approval/denial.
          type: string
      required:
      - value
    manage_headers_set_headers_request:
      example:
        domain: mysite.com
        headers:
          User-Agent:
            value: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101
              Firefox/56.0
          DNT:
            value: "1"
          CoolStuffToken:
            value: abcdef0123456789
            approved: pending
            reason: This unlocks the Sonic fanfiction!
      properties:
        domain:
          description: "The specific domain to set headers for. If null or omitted,\
            \ applies globally."
          type: string
          nullable: true
        headers:
          additionalProperties:
            $ref: "#/components/schemas/manage_headers_set_headers_request_headers_value"
    manage_headers_set_headers_200_response:
      example:
        hydrus_version: 6
        version: 0
      properties:
        version:
          description: The version of the Client API.
          type: integer
        hydrus_version:
          description: The version of the Hydrus Client.
          type: integer
    manage_headers_set_user_agent_request:
      example:
        user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101
          Firefox/56.0
      properties:
        user-agent:
          description: "The User-Agent string to be set. If empty, the default User-Agent\
            \ will be restored."
          type: string
    manage_pages_add_files_request:
      properties:
        page_key:
          description: The page key for the page you wish to add files to.
          type: string
        file_id:
          description: A single file ID to add to the page.
          type: integer
        file_ids:
          description: An array of file IDs to add to the page.
          items:
            type: integer
            nullable: true
          type: array
        hash:
          description: A single file hash (hex SHA256) to add to the page.
          type: string
        hashes:
          description: An array of file hashes (hex SHA256) to add to the page.
          items:
            type: string
          type: array
      required:
      - page_key
      nullable: true
    manage_pages_focus_page_request:
      example:
        page_key: af98318b6eece15fef3cf0378385ce759bfe056916f6e12157cd928eb56c1f18
      properties:
        page_key:
          description: "The key identifying the page to focus, obtained from /manage_pages/get_pages."
          type: string
    manage_pages_refresh_page_request:
      properties:
        page_key:
          description: The page key for the page to refresh
          type: string
      required:
      - page_key
    manage_popups_add_popuip_request:
      example:
        status_text_1: Note to user
      properties:
        is_cancellable:
          description: Whether the popup job can be cancelled.
          type: boolean
        is_pausable:
          description: Whether the popup job can be paused.
          type: boolean
        attached_files_mergable:
          description: Whether attached files can be merged.
          type: boolean
        status_title:
          description: The title of the job status popup.
          type: string
        status_text_1:
          description: First status text line for the popup.
          type: string
        status_text_2:
          description: Second status text line for the popup.
          type: string
        popup_gauge_1:
          description: "A gauge represented as a two-element array [current, max]."
          items:
            type: integer
            nullable: true
          type: array
        popup_gauge_2:
          description: "A second gauge represented as a two-element array [current,\
            \ max]."
          items:
            type: integer
            nullable: true
          type: array
        api_data:
          description: Optional JSON object to associate with the popup.
          type: object
        files_label:
          description: Label for the attached files (required if files are provided).
          type: string
        hashes:
          description: Array of SHA256 hashes of files to attach to the job status.
          items:
            type: string
          type: array
      required:
      - status_text_1
      nullable: true
    manage_popups_call_user_callable_request:
      example:
        job_status_key: abee8b37d47dba8abf82638d4afb1d11586b9ef7be634aeb8ae3bcb8162b2c86
      properties:
        job_status_key:
          description: The job status key to call the user callable of.
          type: string
    manage_popups_cancel_popup_request:
      properties:
        job_status_key:
          description: The job status key to cancel
          type: string
      required:
      - job_status_key
    manage_popups_dismiss_popup_request:
      properties:
        job_status_key:
          description: The job status key to dismiss.
          type: string
      required:
      - job_status_key
    manage_popups_finish_popup_request:
      properties:
        job_status_key:
          description: The job status key to finish.
          type: string
      required:
      - job_status_key
    manage_popups_finish_and_dismiss_popup_request:
      properties:
        job_status_key:
          description: The job status key to dismiss.
          type: string
        seconds:
          description: Optional number of seconds to wait before dismissing the job
            status. Defaults to immediate.
          type: integer
      required:
      - job_status_key
    manage_popups_update_popuip_request:
      properties:
        job_status_key:
          description: The hex key of the job status to update.
          type: string
        status_title:
          description: The title of the popup.
          type: string
          nullable: true
        status_text_1:
          description: First status text line.
          type: string
          nullable: true
        status_text_2:
          description: Second status text line.
          type: string
          nullable: true
        popup_gauge_1:
          description: "Gauge values as [current, max]."
          items:
            type: integer
            nullable: true
          type: array
          nullable: true
        popup_gauge_2:
          description: "Second gauge values as [current, max]."
          items:
            type: integer
            nullable: true
          type: array
          nullable: true
        api_data:
          description: Arbitrary JSON data for API use.
          type: object
          nullable: true
        files_label:
          description: Label for attached files.
          type: string
          nullable: true
        hashes:
          description: List of SHA256 hashes of files to attach.
          items:
            type: string
          type: array
          nullable: true
        file_ids:
          description: List of numerical file IDs to attach.
          items:
            type: integer
            nullable: true
          type: array
          nullable: true
      required:
      - job_status_key
    manage_popups_update_popuip_200_response:
      example:
        job_status:
          attached_files_mergable: true
          status_title: status_title
          job_id: job_id
          is_cancellable: true
          is_pausable: true
          popup_gauge_2:
          - 6
          - 6
          popup_gauge_1:
          - 0
          - 0
          files:
            hashes:
            - hashes
            - hashes
            label: label
          status_text_2: status_text_2
          status_text_1: status_text_1
          api_data: "{}"
      properties:
        job_status:
          $ref: "#/components/schemas/JobStatusObject"
    manage_database_mr_bones_200_response_boned_stats:
      example:
        total_alternate_files: 265
        total_viewtime:
        - 3280
        - 41621
        - 2932
        - 83021
        total_alternate_groups: 63
        num_inbox: 8356
        num_deleted: 7010
        earliest_import_time: 1451408539
        size_inbox: 7052596762
        size_archive: 262911007
        num_archive: 229
        total_potential_pairs: 3252
        total_duplicate_files: 125
        size_deleted: 13742290193
      properties:
        num_inbox:
          example: 8356
          type: integer
        num_archive:
          example: 229
          type: integer
        num_deleted:
          example: 7010
          type: integer
        size_inbox:
          example: 7052596762
          type: integer
        size_archive:
          example: 262911007
          type: integer
        size_deleted:
          example: 13742290193
          type: integer
        earliest_import_time:
          example: 1451408539
          type: integer
        total_viewtime:
          example:
          - 3280
          - 41621
          - 2932
          - 83021
          items:
            type: integer
            nullable: true
          type: array
        total_alternate_files:
          example: 265
          type: integer
        total_alternate_groups:
          example: 63
          type: integer
        total_duplicate_files:
          example: 125
          type: integer
        total_potential_pairs:
          example: 3252
          type: integer
    manage_database_mr_bones_200_response:
      example:
        boned_stats:
          total_alternate_files: 265
          total_viewtime:
          - 3280
          - 41621
          - 2932
          - 83021
          total_alternate_groups: 63
          num_inbox: 8356
          num_deleted: 7010
          earliest_import_time: 1451408539
          size_inbox: 7052596762
          size_archive: 262911007
          num_archive: 229
          total_potential_pairs: 3252
          total_duplicate_files: 125
          size_deleted: 13742290193
      properties:
        boned_stats:
          $ref: "#/components/schemas/manage_database_mr_bones_200_response_boned_stats"
    GetSiblingsAndParentsResponse_tags_value_value:
      example:
        ideal_tag: ideal_tag
        siblings:
        - siblings
        - siblings
        ancestors:
        - ancestors
        - ancestors
        descendants:
        - descendants
        - descendants
      properties:
        ideal_tag:
          type: string
        siblings:
          items:
            type: string
          type: array
        descendants:
          items:
            type: string
          type: array
        ancestors:
          items:
            type: string
          type: array
      required:
      - ancestors
      - descendants
      - ideal_tag
      - siblings
    FileMetadata_file_services:
      properties:
        current:
          type: object
        deleted:
          type: object
    FileMetadata_file_viewing_statistics_inner:
      properties:
        canvas_type:
          type: integer
        canvas_type_pretty:
          type: string
        views:
          type: integer
        viewtime:
          type: number
        last_viewed_timestamp:
          type: number
          nullable: true
    PageInfoResponse_page_info_management_multiple_watcher_import:
      example:
        highlight: highlight
        watcher_imports:
        - watcher_key: cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85
          files_paused: false
          last_check_time: 1566164272
          imports:
            simple_status: 4
            total_processed: 4
            total_to_process: 4
            status: 4 successful (2 already in db)
          created: 1566164269
          subject: gundam pictures
          checking_paused: false
          checking_status: 0
          next_check_time: 1566174272
          url: https://someimageboard.net/m/123456
          gallery_log:
            simple_status: 4
            total_processed: 4
            total_to_process: 4
            status: 4 successful (2 already in db)
        - watcher_key: cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85
          files_paused: false
          last_check_time: 1566164272
          imports:
            simple_status: 4
            total_processed: 4
            total_to_process: 4
            status: 4 successful (2 already in db)
          created: 1566164269
          subject: gundam pictures
          checking_paused: false
          checking_status: 0
          next_check_time: 1566174272
          url: https://someimageboard.net/m/123456
          gallery_log:
            simple_status: 4
            total_processed: 4
            total_to_process: 4
            status: 4 successful (2 already in db)
      properties:
        watcher_imports:
          items:
            $ref: "#/components/schemas/WatcherImport"
          type: array
        highlight:
          description: Hexadecimal key of the highlighted watcher.
          type: string
    PageInfoResponse_page_info_management:
      example:
        multiple_watcher_import:
          highlight: highlight
          watcher_imports:
          - watcher_key: cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85
            files_paused: false
            last_check_time: 1566164272
            imports:
              simple_status: 4
              total_processed: 4
              total_to_process: 4
              status: 4 successful (2 already in db)
            created: 1566164269
            subject: gundam pictures
            checking_paused: false
            checking_status: 0
            next_check_time: 1566174272
            url: https://someimageboard.net/m/123456
            gallery_log:
              simple_status: 4
              total_processed: 4
              total_to_process: 4
              status: 4 successful (2 already in db)
          - watcher_key: cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85
            files_paused: false
            last_check_time: 1566164272
            imports:
              simple_status: 4
              total_processed: 4
              total_to_process: 4
              status: 4 successful (2 already in db)
            created: 1566164269
            subject: gundam pictures
            checking_paused: false
            checking_status: 0
            next_check_time: 1566174272
            url: https://someimageboard.net/m/123456
            gallery_log:
              simple_status: 4
              total_processed: 4
              total_to_process: 4
              status: 4 successful (2 already in db)
      properties:
        multiple_watcher_import:
          $ref: "#/components/schemas/PageInfoResponse_page_info_management_multiple_watcher_import"
    PageInfoResponse_page_info:
      example:
        page_key: page_key
        page_state: 1
        page_type: 5
        management:
          multiple_watcher_import:
            highlight: highlight
            watcher_imports:
            - watcher_key: cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85
              files_paused: false
              last_check_time: 1566164272
              imports:
                simple_status: 4
                total_processed: 4
                total_to_process: 4
                status: 4 successful (2 already in db)
              created: 1566164269
              subject: gundam pictures
              checking_paused: false
              checking_status: 0
              next_check_time: 1566174272
              url: https://someimageboard.net/m/123456
              gallery_log:
                simple_status: 4
                total_processed: 4
                total_to_process: 4
                status: 4 successful (2 already in db)
            - watcher_key: cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85
              files_paused: false
              last_check_time: 1566164272
              imports:
                simple_status: 4
                total_processed: 4
                total_to_process: 4
                status: 4 successful (2 already in db)
              created: 1566164269
              subject: gundam pictures
              checking_paused: false
              checking_status: 0
              next_check_time: 1566174272
              url: https://someimageboard.net/m/123456
              gallery_log:
                simple_status: 4
                total_processed: 4
                total_to_process: 4
                status: 4 successful (2 already in db)
        name: name
        is_media_page: true
      properties:
        name:
          description: Name of the page.
          type: string
        page_key:
          description: Hexadecimal identifier of the page.
          type: string
        page_state:
          description: Current state of the page.
          type: integer
        page_type:
          description: Type of the page.
          type: integer
        is_media_page:
          description: Whether the page is a media page.
          type: boolean
        management:
          $ref: "#/components/schemas/PageInfoResponse_page_info_management"
      required:
      - is_media_page
      - management
      - name
      - page_key
      - page_state
      - page_type
    PageInfoResponse_media:
      example:
        num_files: 4
      properties:
        num_files:
          example: 4
          type: integer
    JobStatus_files:
      example:
        hashes:
        - hashes
        - hashes
        label: label
      properties:
        hashes:
          description: SHA256 hashes of files attached to the job.
          items:
            format: sha256
            type: string
          type: array
        label:
          description: Label for the "Show Files" button.
          type: string
    JobStatus_network_job:
      example:
        current_speed: 5
        domain_ok: true
        no_engine_yet: true
        is_done: true
        bytes_to_read: 7
        waiting_on_connection_error: true
        waiting_on_serverside_bandwidth: true
        bytes_read: 2
        status_text: status_text
        url: url
        total_data_used: 5
        has_error: true
      properties:
        url:
          description: URL being downloaded.
          type: string
        waiting_on_connection_error:
          description: Whether the job is waiting on a connection error.
          type: boolean
        domain_ok:
          description: Whether the domain is acceptable.
          type: boolean
        waiting_on_serverside_bandwidth:
          description: Whether waiting on server-side bandwidth.
          type: boolean
        no_engine_yet:
          description: Whether the job has no engine yet.
          type: boolean
        has_error:
          description: Whether the network job has an error.
          type: boolean
        total_data_used:
          description: Total number of bytes used in download.
          type: integer
        is_done:
          description: Whether the job is done.
          type: boolean
        status_text:
          description: Status text for the job.
          type: string
        current_speed:
          description: Current speed in bytes per second.
          type: integer
        bytes_read:
          description: Number of bytes read.
          type: integer
        bytes_to_read:
          description: Number of bytes to read.
          type: integer
    JobStatusObject_files:
      description: File attachments for the job.
      example:
        hashes:
        - hashes
        - hashes
        label: label
      properties:
        label:
          description: Label for attached files.
          type: string
        hashes:
          items:
            description: SHA256 hashes of attached files.
            type: string
          type: array
  securitySchemes:
    Hydrus-Client-API-Access-Key:
      in: header
      name: Hydrus-Client-API-Access-Key
      type: apiKey
    Hydrus-Client-API-Session-Key:
      in: header
      name: Hydrus-Client-API-Session-Key
      type: apiKey

